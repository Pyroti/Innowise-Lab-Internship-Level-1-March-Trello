{"version":3,"sources":["core/constants/colors.ts","core/constants/MainRouters.ts","core/components/appWrapper/AppWrapper.tsx","core/firebase/firebase.ts","core/constants/mediaQueries.ts","core/components/authContent/AuthContent.tsx","core/redux/types/auth/googleSignInTypes.ts","core/components/authForm/AuthForm.tsx","core/hooks/useTypeSelector.ts","core/redux/action-creators/auth/googleSignInAction.ts","core/redux/types/auth/loginTypes.ts","core/redux/action-creators/auth/loginAction.ts","core/redux/types/users/usersTypes.ts","core/redux/selectors/authSelector.ts","pages/auth/login/styled/AuthButtons.tsx","pages/auth/login/styled/GoogleButton.tsx","pages/auth/login/styled/SingInButton.tsx","pages/auth/login/styled/SingUpButton.tsx","core/constants/toastRules.ts","core/redux/action-creators/users/usersAction.ts","core/redux/types/auth/registerTypes.ts","core/redux/selectors/usersSelectors.ts","pages/auth/login/Login.tsx","core/redux/action-creators/auth/registerAction.ts","core/redux/types/users/userTypes.ts","core/redux/action-creators/users/userAction.ts","core/redux/types/auth/logoutTypes.ts","pages/auth/register/styled/AuthButtons.tsx","pages/auth/register/styled/SingInButton.tsx","pages/auth/register/styled/SingUpButton.tsx","core/constants/regepx.ts","pages/auth/register/Register.tsx","core/redux/selectors/userSelector.ts","core/redux/action-creators/auth/logoutAction.ts","core/redux/types/boards/boardTypes.ts","core/components/modalStyled/CancelButton.tsx","core/components/modalStyled/ExitButton.tsx","core/components/modalStyled/ModalBackground.tsx","core/components/modalStyled/ModalContent.tsx","core/components/modalStyled/ModalIcon.tsx","core/components/modalStyled/ModalWrapper.tsx","core/components/closeModal/CloseModal.tsx","core/components/header/styled/HeaderButtonStyled.tsx","core/components/header/styled/HeaderContentWidth.tsx","core/components/header/styled/HeaderStyled.tsx","core/components/header/Header.tsx","core/redux/action-creators/boards/boardAction.ts","core/redux/types/cards/cardTypes.ts","core/redux/selectors/boardSelector.ts","pages/main/AddBoard/styled/AddBoardButton.tsx","pages/main/AddBoard/styled/AddBoardWrap.tsx","pages/main/AddBoard/styled/AddBoardWrapButton.tsx","pages/main/AddBoard/styled/CloseBoardIcon.tsx","pages/main/AddBoard/AddBoard.tsx","core/helpers/sortData.ts","core/redux/action-creators/cards/cardAction.ts","core/redux/types/auth/setUserTypes.ts","core/redux/selectors/cardSelector.ts","core/redux/thunk/cards/AddCard.ts","core/redux/thunk/cards/changeCardOrderBetweenBoardsDnD.ts","core/redux/thunk/cards/changeCardOrderInBoardDnD.ts","core/redux/thunk/cards/dropHandler.ts","pages/main/AddCard/styled/AddCardButton.tsx","pages/main/AddCard/styled/AddCardWrap.tsx","pages/main/AddCard/styled/AddCardWrapButton.tsx","pages/main/AddCard/styled/CloseCardIcon.tsx","pages/main/AddCard/AddCard.tsx","pages/main/cards/styled/CardsStyled.tsx","pages/main/cards/card/styled/OptionWrap.tsx","core/components/deleteCardModal/deleteCardModal.tsx","core/redux/thunk/card/deleteCard.ts","core/redux/thunk/card/editCard.ts","pages/main/cards/card/Card.tsx","pages/main/cards/Cards.tsx","pages/main/board/styled/BoardTitle.tsx","core/components/deleteBoardModal/deleteBoardModal.tsx","core/redux/thunk/board/deleteBoard.ts","core/redux/thunk/board/editBoard.ts","pages/main/board/Board.tsx","pages/main/styled/BoardWrap.tsx","pages/main/board/styled/BoardStyled.tsx","core/redux/thunk/main/addBoard.ts","core/redux/thunk/main/changeBoardOrderDnD.ts","core/redux/thunk/main/pushTheFirstCardToAnotherBoard.ts","pages/main/Main.tsx","core/redux/action-creators/auth/setUserAction.ts","core/constants/languages.ts","privateRouter.tsx","App.tsx","core/i18n/i18n.ts","core/redux/reducer/authReducer.ts","core/redux/reducer/boardReducer.ts","core/redux/reducer/cardReducer.ts","core/redux/reducer/userReducer.ts","core/redux/reducer/usersReducer.ts","core/redux/reducer/rootReducer.ts","core/redux/store.ts","globalStyled.tsx","index.tsx"],"names":["Ð¡olors","MainRoutes","AppWrapper","styled","div","Colors","wrapper","dotenv","config","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","mediaQueries","auth","googleAuthProvider","GoogleAuthProvider","firestore","GamePageMain","GoogleSignInTypes","AuthForm","form","formBackground","formShadow","formMainColor","mediaTablet","mediaMobile","useTypedSelector","useSelector","LoginActionTypes","googleSignInSuccess","user","type","GOOGLE_SIGN_IN_SUCCESS","payload","usersRef","userGoogle","uid","writeUserGoogleData","a","db","getDatabase","userCountRef","ref","update","userId","username","displayName","email","errorMessage","message","UsersActionTypes","loginInitiate","password","dispatch","LOGIN_START","signInWithEmailAndPassword","then","LOGIN_SUCCESS","loginSuccess","catch","error","LOGIN_FAIL","loginFail","authSelector","state","AuthButtons","GoogleButton","button","withoutColor","SingInButton","formDefaultColor","formMainFocusColor","SingUpButton","toastRyles","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","RegisterActionTypes","getUsersData","USERS_START","get","snapshot","exists","data","val","USERS_SUCCESS","USERS_FAIL","usersSelector","users","Login","useState","loginState","setLoginState","currentUser","history","useHistory","t","useTranslation","useDispatch","useEffect","push","main","handleChange","event","target","name","value","prevState","AuthContent","onSubmit","preventDefault","toast","warn","Object","values","map","indexOf","onClick","GOOGLE_SIGN_IN_START","signInWithPopup","GOOGLE_SIGN_IN_FAIL","TextField","id","label","onChange","to","register","UserActionTypes","registerInitiate","REGISTER_START","createUserWithEmailAndPassword","updateProfile","REGISTER_SUCCESS","registerSuccess","REGISTER_FAIL","registerFail","LogoutActionTypes","userStart","USER_START","userSuccess","USER_SUCCESS","userFail","USER_FAIL","usersBoardsRef","boardId","writeUserBoardData","set","getUserData","deleteBoardIdData","remove","regepx","regPasswordRules","regMailRules","Register","passwordConfirm","registerState","setRegisterState","boards","key","writeUserData","handleSubmit","correctPassword","test","passwordsMatches","correctMail","nameIsNotEmpty","login","userSelector","BoardActionTypes","logoutInitiate","LOGOUT_START","signOut","LOGOUT_SUCCESS","LOGOUT_FAIL","logoutFail","CancelButton","ExitButton","colors","ModalBackground","closeModalBackgroundBackground","ModalContent","Color","closeModalContentColor","ModalIcon","CloseIcon","ModalWrapper","closeModalWrapperBackground","closeModalWrapperColor","CloseModal","props","modalIsOpen","setIsOpen","modalRef","useRef","keyPress","useCallback","document","addEventListener","removeEventListener","showModal","prev","current","MainRouters","HeaderButtonStyled","headerButtonStyledColor","HeaderContentWidth","mediaTabletSmall","HeaderStyled","headerStyledBackground","headerStyledColor","mediaLaptop","Header","prevIsOpen","CardActionTypes","boardStart","BOARD_START","boardSuccess","board","BOARD_SUCCESS","boardFail","BOARD_FAIL","boardIdRef","boardCardIdRef","cardId","writeBoardData","order","title","cards","getBoardsData","boardsId","Promise","all","boardsData","allBoards","finalBoards","reduce","acc","deleteCardIdData","deleteBoardData","editBoardData","boardTitle","updateBoardOrderData","orderNum","boardSelector","AddBoardButton","addBoardButtonColor","AddBoardWrap","AddBoardWrapButton","CloseBoardIcon","AddBoard","isOpenAddWrap","setIsOpenAddWrap","addBoard","openAddwrap","Input","placeholder","sortData","b","SetUserTypes","cardStart","CARD_START","cardSuccess","card","CARD_SUCCSES","cardFail","CARD_FAIL","cardsIdRef","writeCardData","textContent","writeBoardCardData","getCardsData","cardsId","cardsData","allcards","finalCards","deleteCardData","editCardData","cardTitle","updateCardOrderData","cardSelector","addCardThunk","createOrderNumCard","setCardState","getState","uuidv4","keys","changeCardOrderBetweenBoardsDnDThunk","updateCardsOrder","currentCard","currentBordIdcard","cardData","showCards","cardItem","changeCardOrderInBoardDnDThunk","isCurrentCard","isFirstCard","isLastCard","dropHandlerThunk","currentItemNameId","cardNameId","changeCardOrderInBoardDnD","changeCardOrderBetweenBoardsDnD","isCurrentBoard","AddCardButton","AddCardWrap","AddCardWrapButton","CloseCardIcon","AddCard","isOpenCardWrap","setIsOpenCardWrap","addCard","openCardwrap","prevCardWrap","CardStyled","defaultBlackColor","OptionWrap","DeleteCardModal","deleteCard","deleteCardThunk","editCardThunk","Card","isEditing","setIsEditing","cardState","setCardtate","isEditCard","editCard","Cards","setCurrentCard","setCurrentBordIdcard","setCurrentItemNameId","isUpdateCards","setIsUpdateCards","allCardsId","boardIdd","filter","finalCardsId","assign","element","currentBoardId","length","sort","forEach","index","onDragStart","elemName","dragStartHandler","onDragOver","dragOverHandler","onDrop","dropHandler","BoardTitle","DeleteBoardModal","delBoard","deleteBoardThunk","deleteCardsInBoard","updateBoardsOrder","editBoardThunk","boardData","Board","boardState","setBoardate","isEditBoard","prevIsEditing","editBoard","cardsInBoards","BoardWrap","BoardStyled","addBoardThunk","getCurrentUserData","setBoardState","createOrderNum","changeBoardOrderDnDThunk","filterBoards","currentBoard","isFirstBoard","isLastBoard","pushTheFirstCardToAnotherBoardThunk","Main","setCurrentBoard","dataToRender","changeBoardOrderDnD","pushTheFirstCardToAnotherBoard","languages","setUserInitiate","SET_USER","PrivateRoute","Component","component","rest","render","App","onAuthStateChanged","authUser","exact","path","i18n","use","initReactI18next","init","resources","ru","translation","translationRu","en","translationEn","lng","fallbackLng","interpolation","escapeValue","initialState","loading","authReducer","action","isLoading","userReducer","rootReducer","combineReducers","boardReducer","cardReducer","usersReducer","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Global","createGlobalStyle","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.35c586eb.chunk.js","sourcesContent":["enum Ð¡olors {\r\n  wrapper = 'linear-gradient(45deg, #EEE4EA, #E4E8F9)',\r\n  formBackground = '#fff',\r\n  formShadow = 'rgba(34, 60, 80, 0.42)',\r\n  formMainColor = '#8298f9',\r\n  formMainFocusColor = '#7854ff',\r\n  formDefaultColor = '#fff',\r\n  loaderBorder = '#f3f3f3',\r\n  loaderBorderTop = '#3498db',\r\n  withoutColor = 'transparent',\r\n  defaultBlackColor = '#000',\r\n\r\n  addBoardButtonColor = '#1967ff',\r\n\r\n  headerStyledBackground = '#82abfb',\r\n  headerStyledColor = '#fff',\r\n\r\n  closeModalWrapperBackground = '#fff',\r\n  closeModalWrapperColor = '#000',\r\n\r\n  closeModalContentColor = '#141414',\r\n  closeModalContentButtonBackground = '#141414',\r\n  closeModalContentButtonColor = '#fff',\r\n\r\n  headerButtonStyledColor = '#fff',\r\n  closeModalBackgroundBackground = 'rgba(0,0,0,0.8)'\r\n}\r\n\r\nexport default Ð¡olors;\r\n","enum MainRoutes {\r\n  main = '/',\r\n  login = '/Login',\r\n  register = '/Register'\r\n}\r\n\r\nexport default MainRoutes;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\n\r\nconst AppWrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 100vh;\r\n  background: ${Colors.wrapper};\r\n`;\r\n\r\nexport default AppWrapper;\r\n","import dotenv from 'dotenv';\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\n\r\ndotenv.config();\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nconst auth = firebase.auth();\r\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\nconst db = firebase.firestore();\r\n\r\nexport { db, auth, googleAuthProvider };\r\n","enum mediaQueries {\r\n  labptopL = '(max-width: 1440px)',\r\n  mediaLaptop = '(max-width: 1024px)',\r\n  mediaTablet = '(max-width: 768px)',\r\n  mediaTabletSmall = '(max-width: 620px)',\r\n  mediaMobile = '(max-width: 425px)',\r\n  mediaMobileSmall = '(max-width: 320px)'\r\n}\r\n\r\nexport default mediaQueries;\r\n","import styled from 'styled-components';\r\n\r\nconst GamePageMain = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport default GamePageMain;\r\n","import firebase from 'firebase/compat/app';\r\n\r\nexport enum GoogleSignInTypes {\r\n  GOOGLE_SIGN_IN_START = 'GOOGLE_SIGN_IN_START',\r\n  GOOGLE_SIGN_IN_SUCCESS = 'GOOGLE_SIGN_IN_SUCCESS',\r\n  GOOGLE_SIGN_IN_FAIL = 'GOOGLE_SIGN_IN_FAIL'\r\n}\r\n\r\nexport interface GoogleSignInStartAction {\r\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_START;\r\n}\r\n\r\ninterface GoogleSignInSuccessAction {\r\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_SUCCESS;\r\n  payload: firebase.User | null;\r\n}\r\n\r\ninterface GoogleSignInFailAction {\r\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport type GoogleSignInAction =\r\n  | GoogleSignInStartAction\r\n  | GoogleSignInSuccessAction\r\n  | GoogleSignInFailAction;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\nimport mediaQueries from '../../constants/mediaQueries';\r\n\r\nconst AuthForm = styled.form`\r\n  position: relative;\r\n  width: 400px;\r\n  height: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${Colors.formBackground};\r\n  border-radius: 20px;\r\n  padding: 20px;\r\n  box-shadow: 4px 4px 8px 0px ${Colors.formShadow};\r\n  color: ${Colors.formMainColor};\r\n  @media ${mediaQueries.mediaTablet} {\r\n    width: 350px;\r\n    height: 450px;\r\n  }\r\n  @media ${mediaQueries.mediaMobile} {\r\n    width: 300px;\r\n    height: 400px;\r\n  }\r\n`;\r\n\r\nexport default AuthForm;\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../redux/reducer/rootReducer';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import firebase from 'firebase/compat/app';\r\nimport { getDatabase, ref, update } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { auth, googleAuthProvider } from '../../../firebase/firebase';\r\nimport {\r\n  GoogleSignInAction,\r\n  GoogleSignInTypes\r\n} from '../../types/auth/googleSignInTypes';\r\n\r\nconst googleSignInStart = (): GoogleSignInAction => ({\r\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_START\r\n});\r\n\r\nconst googleSignInSuccess = (\r\n  user: firebase.User | null\r\n): GoogleSignInAction => ({\r\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_SUCCESS,\r\n  payload: user\r\n});\r\n\r\nconst googleSignInFail = (error: string): GoogleSignInAction => ({\r\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_FAIL,\r\n  payload: error\r\n});\r\n\r\nconst usersRef = (userGoogle: firebase.User) => `users/${userGoogle.uid}`;\r\n\r\nconst writeUserGoogleData = async (userGoogle: firebase.User) => {\r\n  try {\r\n    const db = getDatabase();\r\n    const userCountRef = ref(db, usersRef(userGoogle));\r\n    await update(userCountRef, {\r\n      userId: userGoogle.uid,\r\n      username: userGoogle.displayName,\r\n      email: userGoogle.email\r\n    });\r\n  } catch (error) {\r\n    const errorMessage = (error as Error).message;\r\n    return errorMessage;\r\n  }\r\n};\r\n\r\nexport const googleSignInInitiate = () => {\r\n  return async (dispatch: Dispatch<GoogleSignInAction>): Promise<void> => {\r\n    try {\r\n      dispatch(googleSignInStart());\r\n      const { user } = await auth.signInWithPopup(googleAuthProvider);\r\n      const res = await writeUserGoogleData(user);\r\n      if (!res) {\r\n        dispatch(googleSignInSuccess(user));\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(googleSignInFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import firebase from 'firebase/compat/app';\r\n\r\nexport enum LoginActionTypes {\r\n  LOGIN_START = 'LOGIN_START',\r\n  LOGIN_SUCCESS = 'LOGIN_SUCCESS',\r\n  LOGIN_FAIL = 'LOGIN_FAIL'\r\n}\r\n\r\nexport interface LoginStartAction {\r\n  type: LoginActionTypes.LOGIN_START;\r\n}\r\n\r\ninterface LoginSuccessAction {\r\n  type: LoginActionTypes.LOGIN_SUCCESS;\r\n  payload: firebase.User | null;\r\n}\r\n\r\ninterface LoginFailAction {\r\n  type: LoginActionTypes.LOGIN_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport type LoginAction =\r\n  | LoginStartAction\r\n  | LoginSuccessAction\r\n  | LoginFailAction;\r\n","import firebase from 'firebase/compat/app';\r\nimport { Dispatch } from 'redux';\r\nimport { auth } from '../../../firebase/firebase';\r\nimport { LoginAction, LoginActionTypes } from '../../types/auth/loginTypes';\r\n\r\nconst loginStart = (): LoginAction => ({\r\n  type: LoginActionTypes.LOGIN_START\r\n});\r\n\r\nconst loginSuccess = (user: firebase.User): LoginAction => ({\r\n  type: LoginActionTypes.LOGIN_SUCCESS,\r\n  payload: user\r\n});\r\n\r\nconst loginFail = (error: string): LoginAction => ({\r\n  type: LoginActionTypes.LOGIN_FAIL,\r\n  payload: error\r\n});\r\n\r\nexport const loginInitiate = (email: string, password: string) => {\r\n  return (dispatch: Dispatch<LoginAction>): void => {\r\n    dispatch(loginStart());\r\n    auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then(({ user }) => {\r\n        dispatch(loginSuccess(user));\r\n      })\r\n      .catch((error: Error) => dispatch(loginFail(error.message)));\r\n  };\r\n};\r\n","export enum UsersActionTypes {\r\n  USERS_START = 'USERS_START',\r\n  USERS_SUCCESS = 'USERS_SUCCESS',\r\n  USERS_FAIL = 'USERS_FAIL'\r\n}\r\n\r\nexport interface UsersState {\r\n  userId: string;\r\n  username: string;\r\n  email: string;\r\n  boards: {\r\n    [key: string]: { boardId: string };\r\n  };\r\n}\r\n\r\nexport interface UsersStartAction {\r\n  type: UsersActionTypes.USERS_START;\r\n}\r\n\r\ninterface UsersSuccessAction {\r\n  type: UsersActionTypes.USERS_SUCCESS;\r\n  payload: {\r\n    [id: string]: UsersState;\r\n  };\r\n}\r\n\r\ninterface UsersFailAction {\r\n  type: UsersActionTypes.USERS_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport type UsersAction =\r\n  | UsersStartAction\r\n  | UsersSuccessAction\r\n  | UsersFailAction;\r\n","import { AuthState } from '../reducer/authReducer';\r\nimport { RootState } from '../reducer/rootReducer';\r\n\r\nconst authSelector = (state: RootState): AuthState => state.auth;\r\n\r\nexport default authSelector;\r\n","import styled from 'styled-components';\r\nimport mediaQueries from '../../../../core/constants/mediaQueries';\r\n\r\nconst AuthButtons = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 60%;\r\n  margin-top: 40px;\r\n\r\n  @media ${mediaQueries.mediaTablet} {\r\n    width: 70%;\r\n  }\r\n\r\n  @media ${mediaQueries.mediaMobile} {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport default AuthButtons;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst GoogleButton = styled.button`\r\n  outline: none;\r\n  border: 0;\r\n  background: ${Colors.withoutColor};\r\n  margin: 20px 0;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default GoogleButton;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst SingInButton = styled.button`\r\n  width: 90px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.formMainColor};\r\n  outline: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n  color: ${Colors.formDefaultColor};\r\n  &:hover {\r\n    background-color: ${Colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default SingInButton;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst SingUpButton = styled.button`\r\n  width: 90px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.withoutColor};\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n  color: ${Colors.formMainColor};\r\n  &:hover {\r\n    border: 2px ${Colors.formMainFocusColor} solid;\r\n    color: ${Colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default SingUpButton;\r\n","const toastRyles = {\r\n  position: 'bottom-right',\r\n  autoClose: 3000,\r\n  hideProgressBar: false,\r\n  closeOnClick: true,\r\n  pauseOnHover: true,\r\n  draggable: true\r\n};\r\n\r\nexport default toastRyles;\r\n","import { get, getDatabase, ref } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n  UsersAction,\r\n  UsersActionTypes,\r\n  UsersState\r\n} from '../../types/users/usersTypes';\r\n\r\nconst usersStart = (): UsersAction => ({\r\n  type: UsersActionTypes.USERS_START\r\n});\r\n\r\nconst usersSuccess = (user: { [id: string]: UsersState }): UsersAction => ({\r\n  type: UsersActionTypes.USERS_SUCCESS,\r\n  payload: user\r\n});\r\n\r\nconst usersFail = (error: string): UsersAction => ({\r\n  type: UsersActionTypes.USERS_FAIL,\r\n  payload: error\r\n});\r\n\r\nconst usersRef = `users/`;\r\n\r\nconst getUsersData = () => {\r\n  return async (dispatch: Dispatch<UsersAction>): Promise<void> => {\r\n    try {\r\n      dispatch(usersStart());\r\n      const db = getDatabase();\r\n      const userCountRef = ref(db, usersRef);\r\n      const snapshot = await get(userCountRef);\r\n      if (snapshot.exists()) {\r\n        const data = snapshot.val();\r\n        dispatch(usersSuccess(data));\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(usersFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nexport { getUsersData };\r\n","import firebase from 'firebase/compat/app';\r\n\r\nexport enum RegisterActionTypes {\r\n  REGISTER_START = 'REGISTER_START',\r\n  REGISTER_SUCCESS = 'REGISTER_SUCCESS',\r\n  REGISTER_FAIL = 'REGISTER_FAIL'\r\n}\r\n\r\nexport interface registerStartAction {\r\n  type: RegisterActionTypes.REGISTER_START;\r\n}\r\n\r\ninterface registerSuccessAction {\r\n  type: RegisterActionTypes.REGISTER_SUCCESS;\r\n  payload: firebase.User | null;\r\n}\r\n\r\ninterface registerFailAction {\r\n  type: RegisterActionTypes.REGISTER_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport type RegisterAction =\r\n  | registerStartAction\r\n  | registerSuccessAction\r\n  | registerFailAction;\r\n","import { RootState } from '../reducer/rootReducer';\r\nimport { InitUsersState } from '../reducer/usersReducer';\r\n\r\nconst usersSelector = (state: RootState): InitUsersState => state.users;\r\n\r\nexport default usersSelector;\r\n","import TextField from '@material-ui/core/TextField';\r\nimport GoogleIcon from '@mui/icons-material/Google';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport AuthContent from '../../../core/components/authContent/AuthContent';\r\nimport AuthForm from '../../../core/components/authForm/AuthForm';\r\nimport MainRoutes from '../../../core/constants/MainRouters';\r\nimport { useTypedSelector } from '../../../core/hooks/useTypeSelector';\r\nimport { googleSignInInitiate } from '../../../core/redux/action-creators/auth/googleSignInAction';\r\nimport { loginInitiate } from '../../../core/redux/action-creators/auth/loginAction';\r\nimport authSelector from '../../../core/redux/selectors/authSelector';\r\nimport AuthButtons from './styled/AuthButtons';\r\nimport GoogleButton from './styled/GoogleButton';\r\nimport SingInButton from './styled/SingInButton';\r\nimport SingUpButton from './styled/SingUpButton';\r\nimport { ToastContainer, toast, ToastOptions } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport toastRyles from '../../../core/constants/toastRules';\r\nimport { getUsersData } from '../../../core/redux/action-creators/users/usersAction';\r\nimport usersSelector from '../../../core/redux/selectors/usersSelectors';\r\n\r\nconst Login: React.FC = () => {\r\n  const [loginState, setLoginState] = useState({\r\n    email: '',\r\n    password: ''\r\n  });\r\n\r\n  const { email, password } = loginState;\r\n\r\n  const { currentUser } = useTypedSelector(authSelector);\r\n  const { users } = useTypedSelector(usersSelector);\r\n\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      history.push(MainRoutes.main);\r\n    }\r\n  }, [currentUser, history]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsersData());\r\n  }, [dispatch]);\r\n\r\n  const handleGoogleSignIn = () => {\r\n    dispatch(googleSignInInitiate());\r\n  };\r\n\r\n  const checkEmptyInput = () => {\r\n    if (email === '') {\r\n      toast.warn(t('youDidntEnterYourPassword'), toastRyles as ToastOptions);\r\n    }\r\n    if (password === '') {\r\n      toast.warn(t('youDidntEnterYourEmail'), toastRyles as ToastOptions);\r\n    }\r\n  };\r\n\r\n  const checkUserExists = () => {\r\n    const usersMail = Object.values(users).map((user) => user.email);\r\n    if (usersMail.indexOf(email) === -1) {\r\n      toast.warn(t('theUserDoesNotExist'), toastRyles as ToastOptions);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    checkEmptyInput();\r\n    checkUserExists();\r\n    if (email && password) {\r\n      dispatch(loginInitiate(email, password));\r\n      setLoginState({ email: email, password: '' });\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setLoginState((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <AuthContent>\r\n      <AuthForm onSubmit={handleSubmit}>\r\n        <h1>{t('marchTrello')}</h1>\r\n\r\n        <GoogleButton type=\"button\" onClick={handleGoogleSignIn}>\r\n          <GoogleIcon />\r\n        </GoogleButton>\r\n\r\n        <p>{t('or')}</p>\r\n\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label={t('enterYourMail')}\r\n          type=\"email\"\r\n          name=\"email\"\r\n          value={email}\r\n          onChange={handleChange}\r\n        />\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label={t('enterYourPassword')}\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={handleChange}\r\n        />\r\n\r\n        <AuthButtons>\r\n          <SingInButton type=\"submit\">{t('logIn')}</SingInButton>\r\n          <Link to={MainRoutes.register}>\r\n            <SingUpButton type=\"button\">{t('registration')}</SingUpButton>\r\n          </Link>\r\n        </AuthButtons>\r\n      </AuthForm>\r\n      <ToastContainer />\r\n    </AuthContent>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import firebase from 'firebase/compat/app';\r\nimport { Dispatch } from 'redux';\r\nimport { auth } from '../../../firebase/firebase';\r\nimport {\r\n  RegisterAction,\r\n  RegisterActionTypes\r\n} from '../../types/auth/registerTypes';\r\n\r\nconst registerStart = (): RegisterAction => ({\r\n  type: RegisterActionTypes.REGISTER_START\r\n});\r\n\r\nconst registerSuccess = (user: firebase.User | null): RegisterAction => ({\r\n  type: RegisterActionTypes.REGISTER_SUCCESS,\r\n  payload: user\r\n});\r\n\r\nconst registerFail = (error: string): RegisterAction => ({\r\n  type: RegisterActionTypes.REGISTER_FAIL,\r\n  payload: error\r\n});\r\n\r\nexport const registerInitiate = (\r\n  email: string,\r\n  password: string,\r\n  displayName: string\r\n) => {\r\n  return (dispatch: Dispatch<RegisterAction>): void => {\r\n    dispatch(registerStart());\r\n    auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then(({ user }) => {\r\n        user?.updateProfile({\r\n          displayName\r\n        });\r\n        dispatch(registerSuccess(user));\r\n      })\r\n      .catch((error: Error) => dispatch(registerFail(error.message)));\r\n  };\r\n};\r\n","export enum UserActionTypes {\r\n  USER_START = 'USER_START',\r\n  USER_SUCCESS = 'USER_SUCCESS',\r\n  USER_FAIL = 'USER_FAIL'\r\n}\r\n\r\nexport interface UserState {\r\n  userId: string;\r\n  username: string;\r\n  email: string;\r\n  boards: {\r\n    [key: string]: { boardId: string };\r\n  };\r\n}\r\n\r\nexport interface UserStartAction {\r\n  type: UserActionTypes.USER_START;\r\n}\r\n\r\ninterface UserSuccessAction {\r\n  type: UserActionTypes.USER_SUCCESS;\r\n  payload: UserState;\r\n}\r\n\r\ninterface UserFailAction {\r\n  type: UserActionTypes.USER_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport type UserAction = UserStartAction | UserSuccessAction | UserFailAction;\r\n","import firebase from 'firebase/compat/app';\r\nimport { get, getDatabase, ref, remove, set } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n  UserAction,\r\n  UserActionTypes,\r\n  UserState\r\n} from '../../types/users/userTypes';\r\n\r\nconst userStart = (): UserAction => ({\r\n  type: UserActionTypes.USER_START\r\n});\r\n\r\nconst userSuccess = (user: UserState): UserAction => ({\r\n  type: UserActionTypes.USER_SUCCESS,\r\n  payload: user\r\n});\r\n\r\nconst userFail = (error: string): UserAction => ({\r\n  type: UserActionTypes.USER_FAIL,\r\n  payload: error\r\n});\r\n\r\nconst usersRef = (userId: string) => `users/${userId}`;\r\nconst usersBoardsRef = (userId: string, boardId: string) =>\r\n  `users/${userId}/boards/${boardId}`;\r\n\r\nconst writeUserData = (userId: string, username: string, email: string) => {\r\n  return async (dispatch: Dispatch<UserAction>): Promise<void> => {\r\n    try {\r\n      dispatch(userStart());\r\n      const user = {\r\n        userId,\r\n        username,\r\n        email,\r\n        boards: {\r\n          key: { boardId: '' }\r\n        }\r\n      };\r\n      const db = getDatabase();\r\n      set(ref(db, usersRef(userId)), {\r\n        userId: userId,\r\n        username: username,\r\n        email: email\r\n      });\r\n      dispatch(userSuccess(user));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(userFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst writeUserBoardData = (\r\n  currentUser: firebase.User | null,\r\n  boardId: string\r\n) => {\r\n  return async (dispatch: Dispatch<UserAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      const usersRef = ref(db, usersBoardsRef(currentUser?.uid, boardId));\r\n      set(usersRef, {\r\n        boardId: boardId\r\n      });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(userFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst getUserData = (currentUser: firebase.User | null) => {\r\n  return async (dispatch: Dispatch<UserAction>): Promise<void> => {\r\n    try {\r\n      dispatch(userStart());\r\n      const db = getDatabase();\r\n      const userCountRef = ref(db, usersRef(currentUser?.uid));\r\n      const snapshot = await get(userCountRef);\r\n      if (snapshot.exists()) {\r\n        const data = snapshot.val();\r\n        dispatch(userSuccess(data));\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(userFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst deleteBoardIdData = (userId: string, boardId: string) => {\r\n  return async (dispatch: Dispatch<UserAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      remove(ref(db, usersBoardsRef(userId, boardId)));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(userFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nexport { writeUserData, getUserData, writeUserBoardData, deleteBoardIdData };\r\n","export enum LogoutActionTypes {\r\n  LOGOUT_START = 'LOGOUT_START',\r\n  LOGOUT_SUCCESS = 'LOGOUT_SUCCESS',\r\n  LOGOUT_FAIL = 'LOGOUT_FAIL'\r\n}\r\n\r\nexport interface LogoutStartAction {\r\n  type: LogoutActionTypes.LOGOUT_START;\r\n}\r\n\r\ninterface LogoutSuccessAction {\r\n  type: LogoutActionTypes.LOGOUT_SUCCESS;\r\n}\r\n\r\ninterface LogoutFailAction {\r\n  type: LogoutActionTypes.LOGOUT_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport type LogoutAction =\r\n  | LogoutStartAction\r\n  | LogoutSuccessAction\r\n  | LogoutFailAction;\r\n","import styled from 'styled-components';\r\nimport mediaQueries from '../../../../core/constants/mediaQueries';\r\n\r\nconst AuthButtons = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 60%;\r\n  margin-top: 40px;\r\n\r\n  @media ${mediaQueries.mediaTablet} {\r\n    width: 70%;\r\n  }\r\n\r\n  @media ${mediaQueries.mediaMobile} {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport default AuthButtons;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst SingInButton = styled.button`\r\n  width: 90px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.withoutColor};\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n  color: ${Colors.formMainColor};\r\n  &:hover {\r\n    border: 2px ${Colors.formMainFocusColor} solid;\r\n    color: ${Colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default SingInButton;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst SingUpButton = styled.button`\r\n  width: 90px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.formMainColor};\r\n  outline: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n  color: ${Colors.formDefaultColor};\r\n  &:hover {\r\n    background-color: ${Colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default SingUpButton;\r\n","const regepx = {\r\n  regPasswordRules: /(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{6,}/g,\r\n  regMailRules: /^[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}$/i\r\n};\r\n\r\nexport default regepx;\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport AuthContent from '../../../core/components/authContent/AuthContent';\r\nimport AuthForm from '../../../core/components/authForm/AuthForm';\r\nimport MainRoutes from '../../../core/constants/MainRouters';\r\nimport { useTypedSelector } from '../../../core/hooks/useTypeSelector';\r\nimport { registerInitiate } from '../../../core/redux/action-creators/auth/registerAction';\r\nimport { writeUserData } from '../../../core/redux/action-creators/users/userAction';\r\nimport authSelector from '../../../core/redux/selectors/authSelector';\r\nimport AuthButtons from './styled/AuthButtons';\r\nimport SingInButton from './styled/SingInButton';\r\nimport SingUpButton from './styled/SingUpButton';\r\nimport { getUsersData } from '../../../core/redux/action-creators/users/usersAction';\r\nimport { ToastContainer, toast, ToastOptions } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport usersSelector from '../../../core/redux/selectors/usersSelectors';\r\nimport regepx from '../../../core/constants/regepx';\r\nimport toastRyles from '../../../core/constants/toastRules';\r\n\r\nconst Register: React.FC = () => {\r\n  const [registerState, setRegisterState] = useState({\r\n    displayName: '',\r\n    email: '',\r\n    password: '',\r\n    passwordConfirm: ''\r\n  });\r\n  const { email, password, displayName, passwordConfirm } = registerState;\r\n\r\n  const { currentUser } = useTypedSelector(authSelector);\r\n  const { users } = useTypedSelector(usersSelector);\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      history.push(MainRoutes.main);\r\n    }\r\n  }, [currentUser, history]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsersData());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      dispatch(writeUserData(currentUser?.uid, displayName, email));\r\n      setRegisterState({\r\n        email: '',\r\n        password: '',\r\n        displayName: '',\r\n        passwordConfirm: ''\r\n      });\r\n    }\r\n  }, [currentUser, dispatch, displayName, email]);\r\n\r\n  const handleChange = (event: React.ChangeEvent) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setRegisterState((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const checkPassword = () => {\r\n    if (!regepx.regPasswordRules.test(password)) {\r\n      toast.warn(t('passwordRules'), toastRyles as ToastOptions);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const checkMail = () => {\r\n    if (!regepx.regMailRules.test(email)) {\r\n      toast.warn(t('invalidLogin'), toastRyles as ToastOptions);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const checkDisplayName = () => {\r\n    if (displayName === '') {\r\n      toast.warn(t('displayNameEmpty'), toastRyles as ToastOptions);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const checkPasswordMathes = () => {\r\n    if (password !== passwordConfirm) {\r\n      toast.warn(t('passwordsDoNotMatch'), toastRyles as ToastOptions);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const checkUserExist = () => {\r\n    const usersMail = Object.values(users).map((user) => user.email);\r\n    if (usersMail.indexOf(email) != -1) {\r\n      toast.warn(t('theUserExists'), toastRyles as ToastOptions);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const correctPassword = checkPassword();\r\n    const passwordsMatches = checkPasswordMathes();\r\n    const correctMail = checkMail();\r\n    const nameIsNotEmpty = checkDisplayName();\r\n    const userExists = checkUserExist();\r\n\r\n    if (\r\n      userExists &&\r\n      nameIsNotEmpty &&\r\n      correctMail &&\r\n      correctPassword &&\r\n      passwordsMatches\r\n    ) {\r\n      dispatch(registerInitiate(email, password, displayName));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContent>\r\n      <AuthForm onSubmit={handleSubmit}>\r\n        <h1>{t('registration')}</h1>\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label={t('enterYourName')}\r\n          type=\"text\"\r\n          name=\"displayName\"\r\n          value={displayName}\r\n          onChange={handleChange}\r\n        />\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label={t('enterYourMail')}\r\n          type=\"email\"\r\n          name=\"email\"\r\n          value={email}\r\n          onChange={handleChange}\r\n        />\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label={t('enterYourPassword')}\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={handleChange}\r\n        />\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label={t('reEnterYourPassword')}\r\n          type=\"password\"\r\n          name=\"passwordConfirm\"\r\n          value={passwordConfirm}\r\n          onChange={handleChange}\r\n        />\r\n        <AuthButtons>\r\n          <SingUpButton type=\"button\" onClick={handleSubmit}>\r\n            {t('createAccount')}\r\n          </SingUpButton>\r\n          <Link to={MainRoutes.login}>\r\n            <SingInButton type=\"button\">{t('goBack')}</SingInButton>\r\n          </Link>\r\n        </AuthButtons>\r\n      </AuthForm>\r\n      <ToastContainer />\r\n    </AuthContent>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import { RootState } from '../reducer/rootReducer';\r\nimport { InitUserState } from '../reducer/userReducer';\r\n\r\nconst userSelector = (state: RootState): InitUserState => state.user;\r\n\r\nexport default userSelector;\r\n","import { Dispatch } from 'redux';\r\nimport { auth } from '../../../firebase/firebase';\r\nimport { LogoutAction, LogoutActionTypes } from '../../types/auth/logoutTypes';\r\n\r\nconst logoutStart = (): LogoutAction => ({\r\n  type: LogoutActionTypes.LOGOUT_START\r\n});\r\n\r\nconst logoutSuccess = (): LogoutAction => ({\r\n  type: LogoutActionTypes.LOGOUT_SUCCESS\r\n});\r\n\r\nconst logoutFail = (error: string): LogoutAction => ({\r\n  type: LogoutActionTypes.LOGOUT_FAIL,\r\n  payload: error\r\n});\r\n\r\nexport const logoutInitiate = () => {\r\n  return (dispatch: Dispatch<LogoutAction>): void => {\r\n    dispatch(logoutStart());\r\n    auth\r\n      .signOut()\r\n      .then(() => dispatch(logoutSuccess()))\r\n      .catch((error: Error) => dispatch(logoutFail(error.message)));\r\n  };\r\n};\r\n","export enum BoardActionTypes {\r\n  BOARD_START = 'BOARD_START',\r\n  BOARD_SUCCESS = 'BOARD_SUCCESS',\r\n  BOARD_FAIL = 'BOARD_FAIL'\r\n}\r\n\r\nexport interface BoardState {\r\n  boardId: string;\r\n  title: string;\r\n  order: number;\r\n  cards: {\r\n    [key: string]: { cardId: string };\r\n  };\r\n}\r\n\r\ninterface BoardStartAction {\r\n  type: BoardActionTypes.BOARD_START;\r\n}\r\n\r\ninterface BoardSuccessAction {\r\n  type: BoardActionTypes.BOARD_SUCCESS;\r\n  payload: {\r\n    [id: string]: BoardState;\r\n  };\r\n}\r\n\r\ninterface BoardFailAction {\r\n  type: BoardActionTypes.BOARD_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport type BoardAction =\r\n  | BoardStartAction\r\n  | BoardSuccessAction\r\n  | BoardFailAction;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\n\r\nconst CancelButton = styled.button`\r\n  width: 190px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.withoutColor};\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n  color: ${Colors.formMainColor};\r\n  &:hover {\r\n    border: 2px ${Colors.formMainFocusColor} solid;\r\n    color: ${Colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default CancelButton;\r\n","import styled from 'styled-components';\r\nimport colors from '../../constants/colors';\r\n\r\nconst ExitButton = styled.button`\r\n  width: 190px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  margin-top: 40px;\r\n  background-color: ${colors.formMainColor};\r\n  outline: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n  color: ${colors.formDefaultColor};\r\n  &:hover {\r\n    background-color: ${colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default ExitButton;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\n\r\nconst ModalBackground = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: ${Colors.closeModalBackgroundBackground};\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 100;\r\n`;\r\n\r\nexport default ModalBackground;\r\n","import styled from 'styled-components';\r\nimport Color from '../../constants/colors';\r\n\r\nconst ModalContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  line-height: 1.8;\r\n  height: 100%;\r\n  color: ${Color.closeModalContentColor};\r\n`;\r\n\r\nexport default ModalContent;\r\n","import CloseIcon from '@material-ui/icons/Close';\r\nimport styled from 'styled-components';\r\n\r\nconst ModalIcon = styled(CloseIcon)`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 20px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  z-index: 10;\r\n`;\r\n\r\nexport default ModalIcon;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\nimport mediaQueries from '../../constants/mediaQueries';\r\n\r\nconst ModalWrapper = styled.div`\r\n  width: 500px;\r\n  height: 400px;\r\n  box-shadow: 0 5px 16px ${Colors.formShadow};\r\n  background: ${Colors.closeModalWrapperBackground};\r\n  color: ${Colors.closeModalWrapperColor};\r\n  display: grid;\r\n  position: relative;\r\n  z-index: 100;\r\n  border-radius: 10px;\r\n  padding: 24px;\r\n  @media ${mediaQueries.mediaTablet} {\r\n    width: 400px;\r\n    height: 350px;\r\n  }\r\n  @media ${mediaQueries.mediaMobile} {\r\n    width: 310px;\r\n    height: 350px;\r\n  }\r\n`;\r\n\r\nexport default ModalWrapper;\r\n","import React, {\r\n  Dispatch,\r\n  SetStateAction,\r\n  useCallback,\r\n  useEffect,\r\n  useRef\r\n} from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport MainRouters from '../../constants/MainRouters';\r\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\r\nimport { logoutInitiate } from '../../redux/action-creators/auth/logoutAction';\r\nimport authSelector from '../../redux/selectors/authSelector';\r\nimport CancelButton from '../modalStyled/CancelButton';\r\nimport ExitButton from '../modalStyled/ExitButton';\r\nimport ModalBackground from '../modalStyled/ModalBackground';\r\nimport ModalContent from '../modalStyled/ModalContent';\r\nimport ModalIcon from '../modalStyled/ModalIcon';\r\nimport ModalWrapper from '../modalStyled/ModalWrapper';\r\n\r\ninterface Props {\r\n  modalIsOpen: boolean;\r\n  setIsOpen: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nconst CloseModal: React.FC<Props> = (props: Props) => {\r\n  const { t } = useTranslation();\r\n  const { currentUser } = useTypedSelector(authSelector);\r\n  const { modalIsOpen, setIsOpen } = props;\r\n\r\n  const modalRef = useRef();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const closeModal = (event: React.MouseEvent<HTMLElement>) => {\r\n    if (modalRef.current === event.target) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Escape' && modalIsOpen) {\r\n        setIsOpen(false);\r\n      }\r\n    },\r\n    [modalIsOpen, setIsOpen]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', keyPress);\r\n    return () => document.removeEventListener('keydown', keyPress);\r\n  }, [keyPress]);\r\n\r\n  const showModal = () => setIsOpen((prev) => !prev);\r\n\r\n  const handleAuth = () => {\r\n    if (currentUser) {\r\n      dispatch(logoutInitiate());\r\n    }\r\n  };\r\n\r\n  const closeApp = () => {\r\n    showModal();\r\n    handleAuth();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {modalIsOpen ? (\r\n        <ModalBackground onClick={closeModal} ref={modalRef}>\r\n          <ModalWrapper>\r\n            <ModalContent>\r\n              <h1>{t('areYouSureYouWantToLogOut')}</h1>\r\n              <Link to={MainRouters.login}>\r\n                <ExitButton type=\"button\" onClick={closeApp}>\r\n                  {t('exit')}\r\n                </ExitButton>\r\n              </Link>\r\n              <CancelButton type=\"button\" onClick={showModal}>\r\n                {t('cancel')}\r\n              </CancelButton>\r\n            </ModalContent>\r\n            <ModalIcon onClick={showModal} />\r\n          </ModalWrapper>\r\n        </ModalBackground>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CloseModal;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../constants/colors';\r\n\r\nconst HeaderButtonStyled = styled.button`\r\n  background: ${Colors.withoutColor};\r\n  color: ${Colors.headerButtonStyledColor};\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: none;\r\n  transform: scale(1.4);\r\n`;\r\n\r\nexport default HeaderButtonStyled;\r\n","import styled from 'styled-components';\r\nimport mediaQueries from '../../../constants/mediaQueries';\r\n\r\nconst HeaderContentWidth = styled.div`\r\n  padding: 15px 60px;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  @media ${mediaQueries.mediaTabletSmall} {\r\n    width: none;\r\n    padding: 15px 30px;\r\n  }\r\n`;\r\n\r\nexport default HeaderContentWidth;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../constants/colors';\r\nimport mediaQueries from '../../../constants/mediaQueries';\r\nimport HeaderContentWidth from './HeaderContentWidth';\r\n\r\nconst HeaderStyled = styled.div`\r\n  width: 100%;\r\n  height: 60px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background: ${Colors.headerStyledBackground};\r\n  color: ${Colors.headerStyledColor};\r\n  flex-wrap: wrap;\r\n\r\n  ${HeaderContentWidth}:nth-child(2n + 1) {\r\n    width: 250px;\r\n  }\r\n\r\n  @media ${mediaQueries.mediaLaptop} {\r\n    ${HeaderContentWidth}:nth-child(2) {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  @media ${mediaQueries.mediaTabletSmall} {\r\n    ${HeaderContentWidth}:nth-child(2) {\r\n      display: none;\r\n    }\r\n\r\n    ${HeaderContentWidth}:nth-child(2n + 1) {\r\n      width: auto;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default HeaderStyled;\r\n","import ExitToAppIcon from '@mui/icons-material/ExitToApp';\r\nimport React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\r\nimport userSelector from '../../redux/selectors/userSelector';\r\nimport CloseModal from '../closeModal/CloseModal';\r\nimport HeaderButtonStyled from './styled/HeaderButtonStyled';\r\nimport HeaderContentWidth from './styled/HeaderContentWidth';\r\nimport HeaderStyled from './styled/HeaderStyled';\r\n\r\nconst Header: React.FC = () => {\r\n  const { user } = useTypedSelector(userSelector);\r\n  const { t } = useTranslation();\r\n  const [modalIsOpen, setIsOpen] = useState(false);\r\n\r\n  const openCloseModal = () => {\r\n    setIsOpen((prevIsOpen) => !prevIsOpen);\r\n  };\r\n\r\n  return (\r\n    <HeaderStyled>\r\n      <HeaderContentWidth>\r\n        <h2>{t('marchTrello')}</h2>\r\n      </HeaderContentWidth>\r\n\r\n      <HeaderContentWidth>\r\n        <h2>\r\n          {t('hello')} {user?.username}\r\n        </h2>\r\n      </HeaderContentWidth>\r\n\r\n      <HeaderContentWidth>\r\n        <HeaderButtonStyled onClick={openCloseModal}>\r\n          <ExitToAppIcon />\r\n        </HeaderButtonStyled>\r\n      </HeaderContentWidth>\r\n\r\n      <CloseModal modalIsOpen={modalIsOpen} setIsOpen={setIsOpen} />\r\n    </HeaderStyled>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { get, getDatabase, ref, remove, set, update } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n  BoardAction,\r\n  BoardActionTypes,\r\n  BoardState\r\n} from '../../types/boards/boardTypes';\r\n\r\nconst boardStart = (): BoardAction => ({\r\n  type: BoardActionTypes.BOARD_START\r\n});\r\n\r\nconst boardSuccess = (board: { [id: string]: BoardState }): BoardAction => ({\r\n  type: BoardActionTypes.BOARD_SUCCESS,\r\n  payload: board\r\n});\r\n\r\nconst boardFail = (error: string): BoardAction => ({\r\n  type: BoardActionTypes.BOARD_FAIL,\r\n  payload: error\r\n});\r\n\r\nconst boardIdRef = (boardId: string) => `boards/${boardId}`;\r\nconst boardCardIdRef = (boardId: string, cardId: string) =>\r\n  `boards/${boardId}/cards/${cardId}`;\r\n\r\nconst writeBoardData = (\r\n  boardId: string,\r\n  order: number,\r\n  title: string,\r\n  boards: { [id: string]: BoardState }\r\n) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      const board = {\r\n        boardId,\r\n        order,\r\n        title,\r\n        cards: {\r\n          key: { cardId: '' }\r\n        }\r\n      };\r\n      dispatch(boardStart());\r\n      const db = getDatabase();\r\n      set(ref(db, boardIdRef(boardId)), {\r\n        boardId: boardId,\r\n        order: order,\r\n        title: title\r\n      });\r\n      dispatch(boardSuccess({ ...boards, [boardId]: board }));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst getBoardsData = (boardsId: string[]) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      dispatch(boardStart());\r\n      const db = getDatabase();\r\n      const boardsData = await Promise.all(\r\n        boardsId.map((boardId) => get(ref(db, boardIdRef(boardId))))\r\n      );\r\n      const allBoards = boardsData.map((snapshot) => snapshot.val());\r\n      const finalBoards = allBoards.reduce((acc, board) => {\r\n        if (board?.boardId) {\r\n          acc[board.boardId] = board;\r\n        }\r\n        return acc;\r\n      }, {} as BoardState);\r\n      dispatch(boardSuccess(finalBoards));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst deleteCardIdData = (cardId: string, boardId: string) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      remove(ref(db, boardCardIdRef(boardId, cardId)));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst deleteBoardData = (\r\n  boardId: string,\r\n  boards: { [id: string]: BoardState }\r\n) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      dispatch(boardStart());\r\n      const db = getDatabase();\r\n      remove(ref(db, boardIdRef(boardId)));\r\n      delete boards[`${boardId}`];\r\n      dispatch(boardSuccess(boards));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst editBoardData = (boardId: string, boardTitle: string) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      update(ref(db, boardIdRef(boardId)), { title: boardTitle });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst updateBoardOrderData = (boardId: string, orderNum: number) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      update(ref(db, boardIdRef(boardId)), { order: orderNum });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nexport {\r\n  writeBoardData,\r\n  getBoardsData,\r\n  deleteCardIdData,\r\n  deleteBoardData,\r\n  editBoardData,\r\n  updateBoardOrderData\r\n};\r\n","export enum CardActionTypes {\r\n  CARD_START = 'CARD_START',\r\n  CARD_SUCCSES = 'CARD_SUCCSES',\r\n  CARD_FAIL = 'CARD_FAIL'\r\n}\r\n\r\nexport interface CardState {\r\n  cardId: string;\r\n  order: number;\r\n  title: string;\r\n  textContent?: string;\r\n}\r\n\r\ninterface CardStartAction {\r\n  type: CardActionTypes.CARD_START;\r\n}\r\n\r\ninterface CardSuccessAction {\r\n  type: CardActionTypes.CARD_SUCCSES;\r\n  payload: {\r\n    [id: string]: CardState;\r\n  };\r\n}\r\n\r\ninterface CardFailAction {\r\n  type: CardActionTypes.CARD_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport type CardAction = CardStartAction | CardSuccessAction | CardFailAction;\r\n","import { InitBoardState } from '../reducer/boardReducer';\r\nimport { RootState } from '../reducer/rootReducer';\r\n\r\nconst boardSelector = (state: RootState): InitBoardState => state.board;\r\n\r\nexport default boardSelector;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst AddBoardButton = styled.button`\r\n  width: 200px;\r\n  min-width: 200px;\r\n  height: 100%;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.withoutColor};\r\n  cursor: pointer;\r\n  outline: none;\r\n  color: ${Colors.addBoardButtonColor};\r\n  font-size: 16px;\r\n  margin: 10px;\r\n  padding: 10px;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n  &:before {\r\n    content: '+';\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nexport default AddBoardButton;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst AddBoardWrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  width: 265px;\r\n  min-width: 265px;\r\n  height: 110px;\r\n  margin-top: 10px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n`;\r\n\r\nexport default AddBoardWrap;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst AddBoardWrapButton = styled.button`\r\n  width: 140px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.formMainColor};\r\n  outline: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n  color: ${Colors.formDefaultColor};\r\n  &:hover {\r\n    background-color: ${Colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default AddBoardWrapButton;\r\n","import CloseIcon from '@material-ui/icons/Close';\r\nimport styled from 'styled-components';\r\n\r\nconst CloseBoardIcon = styled(CloseIcon)`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 63px;\r\n  right: 30px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  z-index: 10;\r\n`;\r\n\r\nexport default CloseBoardIcon;\r\n","import Input from '@mui/material/Input';\r\nimport React, { ChangeEvent, useCallback, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport AddBoardButton from './styled/AddBoardButton';\r\nimport AddBoardWrap from './styled/AddBoardWrap';\r\nimport AddBoardWrapButton from './styled/AddBoardWrapButton';\r\nimport CloseBoardIcon from './styled/CloseBoardIcon';\r\n\r\ninterface Props {\r\n  title: string;\r\n  name: string;\r\n  handleChange: (event: ChangeEvent<Element>) => void;\r\n  addBoard: () => void;\r\n}\r\n\r\nconst AddBoard: React.FC<Props> = (props) => {\r\n  const [isOpenAddWrap, setIsOpenAddWrap] = useState(false);\r\n  const { title, name, handleChange, addBoard } = props;\r\n\r\n  const { t } = useTranslation();\r\n\r\n  const openAddwrap = () => setIsOpenAddWrap((prev) => !prev);\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Enter') {\r\n        addBoard();\r\n        openAddwrap();\r\n      }\r\n    },\r\n    [addBoard]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isOpenAddWrap) {\r\n      document.addEventListener('keydown', keyPress);\r\n      return () => document.removeEventListener('keydown', keyPress);\r\n    }\r\n  }, [keyPress, isOpenAddWrap]);\r\n\r\n  if (isOpenAddWrap) {\r\n    return (\r\n      <AddBoardWrap>\r\n        <Input\r\n          placeholder={t('enterTitle')}\r\n          type=\"text\"\r\n          name={name}\r\n          value={title}\r\n          onChange={handleChange}\r\n        />\r\n        <AddBoardWrapButton type=\"button\" onClick={addBoard}>\r\n          {t('addBoard')}\r\n        </AddBoardWrapButton>\r\n        <CloseBoardIcon onClick={openAddwrap} />\r\n      </AddBoardWrap>\r\n    );\r\n  }\r\n  return (\r\n    <AddBoardButton type=\"button\" onClick={openAddwrap}>\r\n      {t('addBoard')}\r\n    </AddBoardButton>\r\n  );\r\n};\r\n\r\nexport default AddBoard;\r\n","import { BoardState } from '../redux/types/boards/boardTypes';\r\nimport { CardState } from '../redux/types/cards/cardTypes';\r\n\r\ntype aType = BoardState | CardState;\r\ntype bType = BoardState | CardState;\r\n\r\nconst sortData = (a: aType, b: bType): number => {\r\n  if (a.order > b.order) {\r\n    return 1;\r\n  } else {\r\n    return -1;\r\n  }\r\n};\r\nexport default sortData;\r\n","import { get, getDatabase, ref, remove, set, update } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n  CardAction,\r\n  CardActionTypes,\r\n  CardState\r\n} from '../../types/cards/cardTypes';\r\n\r\nconst cardStart = (): CardAction => ({\r\n  type: CardActionTypes.CARD_START\r\n});\r\n\r\nconst cardSuccess = (card: { [id: string]: CardState }): CardAction => ({\r\n  type: CardActionTypes.CARD_SUCCSES,\r\n  payload: card\r\n});\r\n\r\nconst cardFail = (error: string): CardAction => ({\r\n  type: CardActionTypes.CARD_FAIL,\r\n  payload: error\r\n});\r\n\r\nconst cardsIdRef = (cardId: string) => `cards/${cardId}`;\r\nconst boardCardIdRef = (boardId: string, cardId: string) =>\r\n  `boards/${boardId}/cards/${cardId}`;\r\n\r\nconst writeCardData = (\r\n  cardId: string,\r\n  order: number,\r\n  title: string,\r\n  textContent: string,\r\n  cards: { [id: string]: CardState }\r\n) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      const card = { cardId, order, title, textContent };\r\n      dispatch(cardStart());\r\n      const db = getDatabase();\r\n      await set(ref(db, cardsIdRef(cardId)), {\r\n        cardId: cardId,\r\n        order: order,\r\n        title: title,\r\n        textContent: textContent\r\n      });\r\n      dispatch(cardSuccess({ ...cards, [cardId]: card }));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst writeBoardCardData = (boardId: string, cardId: string) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      const usersRef = ref(db, boardCardIdRef(boardId, cardId));\r\n      set(usersRef, {\r\n        cardId: cardId\r\n      });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst getCardsData = (cardsId: string[]) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      dispatch(cardStart());\r\n      const db = getDatabase();\r\n      const cardsData = await Promise.all(\r\n        cardsId.map((cardId) => get(ref(db, cardsIdRef(cardId))))\r\n      );\r\n      const allcards = cardsData.map((snapshot) => snapshot.val());\r\n      const finalCards = allcards.reduce((acc, card) => {\r\n        if (card?.cardId) {\r\n          acc[card.cardId] = card;\r\n        }\r\n        return acc;\r\n      }, {} as CardState);\r\n      dispatch(cardSuccess(finalCards));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst deleteCardData = (cardId: string, cards: { [id: string]: CardState }) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      remove(ref(db, cardsIdRef(cardId)));\r\n      delete cards[`${cardId}`];\r\n      dispatch(cardSuccess(cards));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst editCardData = (cardId: string, cardTitle: string) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      await update(ref(db, cardsIdRef(cardId)), { title: cardTitle });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nconst updateCardOrderData = (cardId: string, orderNum: number) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      update(ref(db, cardsIdRef(cardId)), { order: orderNum });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n\r\nexport {\r\n  writeCardData,\r\n  getCardsData,\r\n  writeBoardCardData,\r\n  deleteCardData,\r\n  editCardData,\r\n  updateCardOrderData\r\n};\r\n","import firebase from 'firebase/compat/app';\r\n\r\nexport enum SetUserTypes {\r\n  SET_USER = 'SET_USER'\r\n}\r\n\r\ninterface SetUserAction {\r\n  type: string;\r\n  payload: firebase.User | null;\r\n}\r\n\r\nexport type SetUserActionType = SetUserAction;\r\n","import { InitCardState } from '../reducer/cardReducer';\r\nimport { RootState } from '../reducer/rootReducer';\r\n\r\nconst cardSelector = (state: RootState): InitCardState => state.card;\r\n\r\nexport default cardSelector;\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport { getBoardsData } from '../../action-creators/boards/boardAction';\r\nimport {\r\n  writeBoardCardData,\r\n  writeCardData\r\n} from '../../action-creators/cards/cardAction';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport userSelector from '../../selectors/userSelector';\r\nimport cardSelector from '../../selectors/cardSelector';\r\n\r\ninterface CardDate {\r\n  createOrderNumCard: (currentBoardId: string) => number;\r\n  setCardState: (value: React.SetStateAction<{ cardTitle: string }>) => void;\r\n  boardId: string;\r\n  cardTitle: string;\r\n}\r\n\r\nconst addCardThunk = ({\r\n  createOrderNumCard,\r\n  setCardState,\r\n  boardId,\r\n  cardTitle\r\n}: CardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { user } = userSelector(state);\r\n      const { card } = cardSelector(state);\r\n      const cardId = uuidv4();\r\n      const order = createOrderNumCard(boardId);\r\n      dispatch(writeCardData(cardId, order, cardTitle, 'none', card));\r\n      dispatch(writeBoardCardData(boardId, cardId));\r\n      setCardState({ cardTitle: '' });\r\n      dispatch(getBoardsData(Object.keys(user.boards)));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default addCardThunk;\r\n","import { CardState } from '../../types/cards/cardTypes';\r\nimport {\r\n  deleteCardData,\r\n  updateCardOrderData,\r\n  writeBoardCardData,\r\n  writeCardData\r\n} from '../../action-creators/cards/cardAction';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { deleteCardIdData } from '../../action-creators/boards/boardAction';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport cardSelector from '../../selectors/cardSelector';\r\n\r\ninterface ChangeCardOrder {\r\n  showCards: (boardId: string) => CardState[];\r\n  currentCard: CardState;\r\n  boardId: string;\r\n  cardData: CardState;\r\n  currentBordIdcard: string;\r\n  updateCardsOrder: (boardId: string) => void;\r\n}\r\n\r\nconst changeCardOrderBetweenBoardsDnDThunk = ({\r\n  updateCardsOrder,\r\n  currentCard,\r\n  currentBordIdcard,\r\n  cardData,\r\n  boardId,\r\n  showCards\r\n}: ChangeCardOrder) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { card } = cardSelector(state);\r\n      dispatch(deleteCardData(currentCard.cardId, card));\r\n      dispatch(deleteCardIdData(currentCard.cardId, currentBordIdcard));\r\n      updateCardsOrder(currentBordIdcard);\r\n      updateCardsOrder(boardId);\r\n      dispatch(\r\n        writeCardData(\r\n          currentCard.cardId,\r\n          cardData.order,\r\n          currentCard.title,\r\n          'none',\r\n          card\r\n        )\r\n      );\r\n      dispatch(writeBoardCardData(boardId, currentCard.cardId));\r\n      showCards(boardId).map((cardItem) => {\r\n        if (cardItem.order >= cardData.order) {\r\n          dispatch(updateCardOrderData(cardItem.cardId, cardItem.order + 1));\r\n        }\r\n      });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default changeCardOrderBetweenBoardsDnDThunk;\r\n","import { CardState } from '../../types/cards/cardTypes';\r\nimport { updateCardOrderData } from '../../action-creators/cards/cardAction';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\n\r\ninterface ChangeCardOrder {\r\n  showCards: (boardId: string) => CardState[];\r\n  currentCard: CardState;\r\n  boardId: string;\r\n  cardData: CardState;\r\n}\r\n\r\nconst changeCardOrderInBoardDnDThunk = ({\r\n  showCards,\r\n  currentCard,\r\n  boardId,\r\n  cardData\r\n}: ChangeCardOrder) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>\r\n  ): Promise<void> => {\r\n    try {\r\n      showCards(boardId).map((card) => {\r\n        const isCurrentCard = card.cardId === currentCard.cardId;\r\n\r\n        const isFirstCard =\r\n          card.order <= cardData.order &&\r\n          card.order > currentCard.order &&\r\n          currentCard.order < cardData.order;\r\n\r\n        const isLastCard =\r\n          card.order >= cardData.order &&\r\n          card.order < currentCard.order &&\r\n          currentCard.order > cardData.order;\r\n\r\n        if (isCurrentCard) {\r\n          dispatch(updateCardOrderData(card.cardId, cardData.order));\r\n        } else if (isFirstCard) {\r\n          dispatch(updateCardOrderData(card.cardId, card.order - 1));\r\n        } else if (isLastCard) {\r\n          dispatch(updateCardOrderData(card.cardId, card.order + 1));\r\n        }\r\n      });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default changeCardOrderInBoardDnDThunk;\r\n","import { CardState } from '../../types/cards/cardTypes';\r\nimport { getBoardsData } from '../../action-creators/boards/boardAction';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport userSelector from '../../selectors/userSelector';\r\n\r\ninterface CardDate {\r\n  currentItemNameId: string;\r\n  cardNameId: string;\r\n  currentBordIdcard: string;\r\n  boardId: string;\r\n  cardData: CardState;\r\n  changeCardOrderInBoardDnD: (cardData: CardState) => void;\r\n  changeCardOrderBetweenBoardsDnD: (cardData: CardState) => void;\r\n}\r\n\r\nconst dropHandlerThunk = ({\r\n  currentItemNameId,\r\n  cardNameId,\r\n  currentBordIdcard,\r\n  changeCardOrderInBoardDnD,\r\n  cardData,\r\n  boardId,\r\n  changeCardOrderBetweenBoardsDnD\r\n}: CardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { user } = userSelector(state);\r\n      const isCard = currentItemNameId === cardNameId;\r\n      const isCurrentBoard = currentBordIdcard === boardId;\r\n      if (isCard) {\r\n        if (isCurrentBoard) {\r\n          changeCardOrderInBoardDnD(cardData);\r\n        } else {\r\n          changeCardOrderBetweenBoardsDnD(cardData);\r\n        }\r\n        dispatch(getBoardsData(Object.keys(user.boards)));\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default dropHandlerThunk;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst AddCardButton = styled.button`\r\n  width: 200px;\r\n  min-width: 200px;\r\n  height: 100%;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.withoutColor};\r\n  cursor: pointer;\r\n  outline: none;\r\n  color: ${Colors.addBoardButtonColor};\r\n  font-size: 16px;\r\n  margin: 10px;\r\n  padding: 10px;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n  &:before {\r\n    content: '+';\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nexport default AddCardButton;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst AddCardWrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  width: 265px;\r\n  min-width: 265px;\r\n  height: 110px;\r\n  margin-top: 10px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n`;\r\n\r\nexport default AddCardWrap;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst AddCardWrapButton = styled.button`\r\n  width: 140px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.formMainColor};\r\n  outline: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n  color: ${Colors.formDefaultColor};\r\n  &:hover {\r\n    background-color: ${Colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default AddCardWrapButton;\r\n","import CloseIcon from '@material-ui/icons/Close';\r\nimport styled from 'styled-components';\r\n\r\nconst CloseCardIcon = styled(CloseIcon)`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 63px;\r\n  right: 30px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  z-index: 10;\r\n`;\r\n\r\nexport default CloseCardIcon;\r\n","import Input from '@mui/material/Input';\r\nimport React, { ChangeEvent, useCallback, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport AddCardButton from './styled/AddCardButton';\r\nimport AddCardWrap from './styled/AddCardWrap';\r\nimport AddCardWrapButton from './styled/AddCardWrapButton';\r\nimport CloseCardIcon from './styled/CloseCardIcon';\r\n\r\ninterface Props {\r\n  title: string;\r\n  name: string;\r\n  handleChange: (event: ChangeEvent<Element>) => void;\r\n  boardId: string;\r\n  addCard: (boardId: string) => void;\r\n}\r\n\r\nconst AddCard: React.FC<Props> = (props) => {\r\n  const [isOpenCardWrap, setIsOpenCardWrap] = useState(false);\r\n  const { title, name, handleChange, boardId, addCard } = props;\r\n\r\n  const { t } = useTranslation();\r\n\r\n  const openCardwrap = () => setIsOpenCardWrap((prevCardWrap) => !prevCardWrap);\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Enter') {\r\n        addCard(boardId);\r\n        openCardwrap();\r\n      }\r\n    },\r\n    [addCard, boardId]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isOpenCardWrap) {\r\n      document.addEventListener('keydown', keyPress);\r\n      return () => document.removeEventListener('keydown', keyPress);\r\n    }\r\n  }, [keyPress, isOpenCardWrap]);\r\n\r\n  const addCardClick = () => addCard(boardId);\r\n\r\n  if (isOpenCardWrap) {\r\n    return (\r\n      <AddCardWrap>\r\n        <Input\r\n          placeholder={t('enterTitle')}\r\n          type=\"text\"\r\n          name={name}\r\n          value={title}\r\n          onChange={handleChange}\r\n        />\r\n        <AddCardWrapButton type=\"button\" onClick={addCardClick}>\r\n          {t('addCard')}\r\n        </AddCardWrapButton>\r\n        <CloseCardIcon onClick={openCardwrap} />\r\n      </AddCardWrap>\r\n    );\r\n  }\r\n  return (\r\n    <AddCardButton type=\"button\" onClick={openCardwrap}>\r\n      {t('addCard')}\r\n    </AddCardButton>\r\n  );\r\n};\r\n\r\nexport default AddCard;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\nimport mediaQueries from '../../../../core/constants/mediaQueries';\r\n\r\nconst CardStyled = styled.div`\r\n  width: 250px;\r\n  height: 100%;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.withoutColor};\r\n  cursor: pointer;\r\n  color: ${Colors.defaultBlackColor};\r\n  font-size: 16px;\r\n  margin: 10px;\r\n  padding: 10px;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  @media ${mediaQueries.mediaMobile} {\r\n    && {\r\n      width: 230px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CardStyled;\r\n","import styled from 'styled-components';\r\n\r\nconst OptionWrap = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport default OptionWrap;\r\n","import React, {\r\n  Dispatch,\r\n  SetStateAction,\r\n  useCallback,\r\n  useEffect,\r\n  useRef\r\n} from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Link } from 'react-router-dom';\r\nimport MainRouters from '../../constants/MainRouters';\r\nimport CancelButton from '../modalStyled/CancelButton';\r\nimport ExitButton from '../modalStyled/ExitButton';\r\nimport ModalBackground from '../modalStyled/ModalBackground';\r\nimport ModalContent from '../modalStyled/ModalContent';\r\nimport ModalIcon from '../modalStyled/ModalIcon';\r\nimport ModalWrapper from '../modalStyled/ModalWrapper';\r\n\r\ninterface Props {\r\n  modalIsOpen: boolean;\r\n  setIsOpen: Dispatch<SetStateAction<boolean>>;\r\n  deleteCard: () => void;\r\n}\r\n\r\nconst DeleteCardModal: React.FC<Props> = (props: Props) => {\r\n  const { t } = useTranslation();\r\n\r\n  const { modalIsOpen, setIsOpen, deleteCard } = props;\r\n\r\n  const modalRef = useRef();\r\n\r\n  const closeModal = (event: React.MouseEvent<HTMLElement>) => {\r\n    if (modalRef.current === event.target) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Escape' && modalIsOpen) {\r\n        setIsOpen(false);\r\n      }\r\n    },\r\n    [modalIsOpen, setIsOpen]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', keyPress);\r\n    return () => document.removeEventListener('keydown', keyPress);\r\n  }, [keyPress]);\r\n\r\n  const showModal = () => setIsOpen((prev) => !prev);\r\n\r\n  const closeApp = () => {\r\n    deleteCard();\r\n    showModal();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {modalIsOpen ? (\r\n        <ModalBackground onClick={closeModal} ref={modalRef}>\r\n          <ModalWrapper>\r\n            <ModalContent>\r\n              <h1>{t('deleteCard')}</h1>\r\n              <Link to={MainRouters.login}>\r\n                <ExitButton type=\"button\" onClick={closeApp}>\r\n                  {t('yes')}\r\n                </ExitButton>\r\n              </Link>\r\n              <CancelButton type=\"button\" onClick={showModal}>\r\n                {t('cancel')}\r\n              </CancelButton>\r\n            </ModalContent>\r\n            <ModalIcon onClick={showModal} />\r\n          </ModalWrapper>\r\n        </ModalBackground>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteCardModal;\r\n","import { CardState } from '../../types/cards/cardTypes';\r\nimport { deleteCardIdData } from '../../action-creators/boards/boardAction';\r\nimport {\r\n  deleteCardData,\r\n  getCardsData\r\n} from '../../action-creators/cards/cardAction';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport cardSelector from '../../selectors/cardSelector';\r\n\r\ninterface CardDate {\r\n  updateCardsOrder: (boardsId: string) => void;\r\n  cardsId: () => string[];\r\n  boardId: string;\r\n  card: CardState;\r\n}\r\n\r\nconst deleteCardThunk = ({\r\n  updateCardsOrder,\r\n  card,\r\n  boardId,\r\n  cardsId\r\n}: CardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const cards = cardSelector(state).card;\r\n      dispatch(deleteCardData(card.cardId, cards));\r\n      updateCardsOrder(boardId);\r\n      dispatch(deleteCardIdData(card.cardId, boardId));\r\n      dispatch(getCardsData(cardsId()));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default deleteCardThunk;\r\n","import { CardState } from '../../types/cards/cardTypes';\r\nimport {\r\n  editCardData,\r\n  getCardsData\r\n} from '../../action-creators/cards/cardAction';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\n\r\ninterface CardDate {\r\n  cardsId: () => string[];\r\n  cardTitle: string;\r\n  card: CardState;\r\n}\r\n\r\nconst editCardThunk = ({ card, cardTitle, cardsId }: CardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>\r\n  ): Promise<void> => {\r\n    try {\r\n      dispatch(editCardData(card.cardId, cardTitle));\r\n      dispatch(getCardsData(cardsId()));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default editCardThunk;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { CardState } from '../../../../core/redux/types/cards/cardTypes';\r\nimport CardStyled from '../styled/CardsStyled';\r\nimport DeleteRoundedIcon from '@mui/icons-material/DeleteRounded';\r\nimport { useDispatch } from 'react-redux';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport OptionWrap from './styled/OptionWrap';\r\nimport Input from '@mui/material/Input';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport DeleteCardModal from '../../../../core/components/deleteCardModal/deleteCardModal';\r\nimport deleteCardThunk from '../../../../core/redux/thunk/card/deleteCard';\r\nimport editCardThunk from '../../../../core/redux/thunk/card/editCard';\r\n\r\ninterface CardProps {\r\n  card: CardState;\r\n  boardId: string;\r\n  cardsId: () => string[];\r\n  updateCardsOrder: (boardsId: string) => void;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = (props) => {\r\n  const { card, boardId, cardsId, updateCardsOrder } = props;\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [modalIsOpen, setIsOpen] = useState(false);\r\n  const [cardState, setCardtate] = useState({\r\n    cardTitle: card.title\r\n  });\r\n  const { cardTitle } = cardState;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const isEditCard = () => {\r\n    setIsEditing((prev) => !prev);\r\n  };\r\n\r\n  const editCard = useCallback(() => {\r\n    const data = { card, cardTitle, cardsId };\r\n    dispatch(editCardThunk(data));\r\n    isEditCard();\r\n  }, [card, cardTitle, cardsId, dispatch]);\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Enter') {\r\n        editCard();\r\n      }\r\n    },\r\n    [editCard]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEditing) {\r\n      document.addEventListener('keydown', keyPress);\r\n      return () => document.removeEventListener('keydown', keyPress);\r\n    }\r\n  }, [keyPress, isEditing]);\r\n\r\n  const handleChange = (event: React.ChangeEvent) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setCardtate((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const deleteCard = () => {\r\n    const data = {\r\n      updateCardsOrder,\r\n      card,\r\n      boardId,\r\n      cardsId\r\n    };\r\n    dispatch(deleteCardThunk(data));\r\n  };\r\n\r\n  const openDeleteCardModal = () => {\r\n    setIsOpen((prevIsOpen) => !prevIsOpen);\r\n  };\r\n\r\n  if (isEditing) {\r\n    return (\r\n      <CardStyled>\r\n        <Input\r\n          placeholder={card.title}\r\n          type=\"text\"\r\n          name=\"cardTitle\"\r\n          value={cardTitle}\r\n          onChange={handleChange}\r\n        />\r\n        <OptionWrap>\r\n          <CheckIcon onClick={editCard} />\r\n          <CloseIcon onClick={isEditCard} />\r\n        </OptionWrap>\r\n      </CardStyled>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardStyled>\r\n        {card.order}\r\n        {':'}\r\n        {card.title}\r\n        <OptionWrap>\r\n          <CreateIcon onClick={isEditCard} />\r\n          <DeleteRoundedIcon onClick={openDeleteCardModal} />\r\n        </OptionWrap>\r\n      </CardStyled>\r\n      <DeleteCardModal\r\n        modalIsOpen={modalIsOpen}\r\n        setIsOpen={setIsOpen}\r\n        deleteCard={deleteCard}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport sortData from '../../../core/helpers/sortData';\r\nimport { useTypedSelector } from '../../../core/hooks/useTypeSelector';\r\nimport {\r\n  getCardsData,\r\n  updateCardOrderData\r\n} from '../../../core/redux/action-creators/cards/cardAction';\r\nimport boardSelector from '../../../core/redux/selectors/boardSelector';\r\nimport cardSelector from '../../../core/redux/selectors/cardSelector';\r\nimport userSelector from '../../../core/redux/selectors/userSelector';\r\nimport addCardThunk from '../../../core/redux/thunk/cards/AddCard';\r\nimport changeCardOrderBetweenBoardsDnDThunk from '../../../core/redux/thunk/cards/changeCardOrderBetweenBoardsDnD';\r\nimport changeCardOrderInBoardDnDThunk from '../../../core/redux/thunk/cards/changeCardOrderInBoardDnD';\r\nimport dropHandlerThunk from '../../../core/redux/thunk/cards/dropHandler';\r\nimport { CardState } from '../../../core/redux/types/cards/cardTypes';\r\nimport AddCard from '../AddCard/AddCard';\r\nimport Card from './card/Card';\r\n\r\ninterface Props {\r\n  boardId: string;\r\n  currentCard: CardState;\r\n  setCurrentCard: React.Dispatch<CardState>;\r\n  currentBordIdcard: string;\r\n  setCurrentBordIdcard: React.Dispatch<string>;\r\n  currentItemNameId: string;\r\n  setCurrentItemNameId: React.Dispatch<string>;\r\n  isUpdateCards: boolean;\r\n  setIsUpdateCards: React.Dispatch<boolean>;\r\n}\r\n\r\nconst cardNameId = 'card';\r\n\r\nconst Cards: React.FC<Props> = (props) => {\r\n  const { board } = useTypedSelector(boardSelector);\r\n  const { user } = useTypedSelector(userSelector);\r\n  const { card } = useTypedSelector(cardSelector);\r\n  const {\r\n    boardId,\r\n    currentCard,\r\n    setCurrentCard,\r\n    currentBordIdcard,\r\n    setCurrentBordIdcard,\r\n    currentItemNameId,\r\n    setCurrentItemNameId,\r\n    isUpdateCards,\r\n    setIsUpdateCards\r\n  } = props;\r\n  const [cardState, setCardState] = useState({\r\n    cardTitle: ''\r\n  });\r\n\r\n  const { cardTitle } = cardState;\r\n\r\n  const cardsId = useCallback(() => {\r\n    if (user.boards) {\r\n      const allCardsId = Object.values(\r\n        Object.keys(user.boards).map((boardIdd) => board[boardIdd]?.cards)\r\n      ).filter((card) => card);\r\n      const finalCardsId = Object.assign({}, ...allCardsId);\r\n      return Object.keys(finalCardsId);\r\n    }\r\n  }, [board, user.boards]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (board && board[boardId].cards) {\r\n      dispatch(getCardsData(cardsId()));\r\n    }\r\n  }, [dispatch, board, boardId, cardsId]);\r\n\r\n  const handleChangeCard = (event: React.ChangeEvent) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setCardState((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const showCards = (boardId: string) => {\r\n    return Object.values(card).filter(\r\n      (element) =>\r\n        Object.keys(board[boardId].cards).indexOf(element.cardId) > -1\r\n    );\r\n  };\r\n\r\n  const createOrderNumCard = (currentBoardId: string): number => {\r\n    if (board[currentBoardId].cards) {\r\n      return showCards(boardId).length + 1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  };\r\n\r\n  const addCard = () => {\r\n    const addCardThunkData = {\r\n      createOrderNumCard,\r\n      setCardState,\r\n      boardId,\r\n      cardTitle\r\n    };\r\n    dispatch(addCardThunk(addCardThunkData));\r\n  };\r\n\r\n  const updateCardsOrder = (boardId: string) => {\r\n    showCards(boardId)\r\n      .sort(sortData)\r\n      .forEach((card, index) => {\r\n        dispatch(updateCardOrderData(card.cardId, index + 1));\r\n      });\r\n  };\r\n\r\n  if (isUpdateCards) {\r\n    updateCardsOrder(currentBordIdcard);\r\n    setIsUpdateCards(false);\r\n  }\r\n\r\n  const dragStartHandler = (\r\n    event: React.DragEvent<HTMLDivElement>,\r\n    cardData: CardState\r\n  ) => {\r\n    setCurrentCard(cardData);\r\n    setCurrentBordIdcard(boardId);\r\n    const elemName = (event.target as Element).id;\r\n    setCurrentItemNameId(elemName);\r\n  };\r\n\r\n  const dragOverHandler = (event: React.DragEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const changeCardOrderInBoardDnD = (cardData: CardState) => {\r\n    const data = { showCards, currentCard, boardId, cardData };\r\n    dispatch(changeCardOrderInBoardDnDThunk(data));\r\n  };\r\n\r\n  const changeCardOrderBetweenBoardsDnD = (cardData: CardState) => {\r\n    const data = {\r\n      updateCardsOrder,\r\n      currentBordIdcard,\r\n      cardData,\r\n      boardId,\r\n      showCards,\r\n      currentCard\r\n    };\r\n    dispatch(changeCardOrderBetweenBoardsDnDThunk(data));\r\n  };\r\n\r\n  const dropHandler = (\r\n    event: React.DragEvent<HTMLDivElement>,\r\n    cardData: CardState\r\n  ) => {\r\n    event.preventDefault();\r\n    const data = {\r\n      currentItemNameId,\r\n      cardNameId,\r\n      currentBordIdcard,\r\n      changeCardOrderInBoardDnD,\r\n      cardData,\r\n      boardId,\r\n      changeCardOrderBetweenBoardsDnD\r\n    };\r\n    dispatch(dropHandlerThunk(data));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {card &&\r\n          board[boardId].cards &&\r\n          showCards(boardId)\r\n            .sort(sortData)\r\n            .map((cardData) => (\r\n              <div\r\n                id=\"card\"\r\n                key={cardData.cardId}\r\n                onDragStart={(event) => dragStartHandler(event, cardData)}\r\n                onDragOver={(event) => dragOverHandler(event)}\r\n                onDrop={(event) => dropHandler(event, cardData)}\r\n                draggable={true}\r\n              >\r\n                <Card\r\n                  cardsId={cardsId}\r\n                  boardId={boardId}\r\n                  card={cardData}\r\n                  updateCardsOrder={updateCardsOrder}\r\n                ></Card>\r\n              </div>\r\n            ))}\r\n      </div>\r\n      <AddCard\r\n        title={cardTitle}\r\n        name=\"cardTitle\"\r\n        handleChange={handleChangeCard}\r\n        addCard={addCard}\r\n        boardId={boardId}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\n\r\nconst BoardTitle = styled.div`\r\n  height: 100%;\r\n  background-color: ${Colors.withoutColor};\r\n  color: ${Colors.defaultBlackColor};\r\n  font-size: 16px;\r\n  padding: 10px;\r\n  margin: -12px;\r\n  margin-bottom: 10px;\r\n  border-bottom: 2px ${Colors.formMainColor} solid;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: grab;\r\n`;\r\n\r\nexport default BoardTitle;\r\n","import React, {\r\n  Dispatch,\r\n  SetStateAction,\r\n  useCallback,\r\n  useEffect,\r\n  useRef\r\n} from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Link } from 'react-router-dom';\r\nimport MainRouters from '../../constants/MainRouters';\r\nimport CancelButton from '../modalStyled/CancelButton';\r\nimport ExitButton from '../modalStyled/ExitButton';\r\nimport ModalBackground from '../modalStyled/ModalBackground';\r\nimport ModalContent from '../modalStyled/ModalContent';\r\nimport ModalIcon from '../modalStyled/ModalIcon';\r\nimport ModalWrapper from '../modalStyled/ModalWrapper';\r\n\r\ninterface Props {\r\n  modalIsOpen: boolean;\r\n  setIsOpen: Dispatch<SetStateAction<boolean>>;\r\n  delBoard: () => void;\r\n}\r\n\r\nconst DeleteBoardModal: React.FC<Props> = (props: Props) => {\r\n  const { t } = useTranslation();\r\n\r\n  const { modalIsOpen, setIsOpen, delBoard } = props;\r\n\r\n  const modalRef = useRef();\r\n\r\n  const closeModal = (event: React.MouseEvent<HTMLElement>) => {\r\n    if (modalRef.current === event.target) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Escape' && modalIsOpen) {\r\n        setIsOpen(false);\r\n      }\r\n    },\r\n    [modalIsOpen, setIsOpen]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', keyPress);\r\n    return () => document.removeEventListener('keydown', keyPress);\r\n  }, [keyPress]);\r\n\r\n  const showModal = () => setIsOpen((prev) => !prev);\r\n\r\n  const closeApp = () => {\r\n    delBoard();\r\n    showModal();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {modalIsOpen ? (\r\n        <ModalBackground onClick={closeModal} ref={modalRef}>\r\n          <ModalWrapper>\r\n            <ModalContent>\r\n              <h1>{t('deleteBoard')}</h1>\r\n              <Link to={MainRouters.login}>\r\n                <ExitButton type=\"button\" onClick={closeApp}>\r\n                  {t('yes')}\r\n                </ExitButton>\r\n              </Link>\r\n              <CancelButton type=\"button\" onClick={showModal}>\r\n                {t('cancel')}\r\n              </CancelButton>\r\n            </ModalContent>\r\n            <ModalIcon onClick={showModal} />\r\n          </ModalWrapper>\r\n        </ModalBackground>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteBoardModal;\r\n","import { deleteBoardData } from '../../action-creators/boards/boardAction';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport {\r\n  deleteBoardIdData,\r\n  getUserData\r\n} from '../../action-creators/users/userAction';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport authSelector from '../../selectors/authSelector';\r\nimport boardSelector from '../../selectors/boardSelector';\r\n\r\ninterface BoardDate {\r\n  updateBoardsOrder: () => void;\r\n  deleteCardsInBoard: (boardId: string) => void;\r\n  boardId: string;\r\n}\r\n\r\nconst deleteBoardThunk = ({\r\n  deleteCardsInBoard,\r\n  boardId,\r\n  updateBoardsOrder\r\n}: BoardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { board } = boardSelector(state);\r\n      const { currentUser } = authSelector(state);\r\n      deleteCardsInBoard(boardId);\r\n      dispatch(deleteBoardData(boardId, board));\r\n      dispatch(deleteBoardIdData(currentUser.uid, boardId));\r\n      updateBoardsOrder();\r\n      dispatch(getUserData(currentUser));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default deleteBoardThunk;\r\n","import {\r\n  editBoardData,\r\n  getBoardsData\r\n} from '../../action-creators/boards/boardAction';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { BoardState } from '../../types/boards/boardTypes';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport userSelector from '../../selectors/userSelector';\r\n\r\ninterface BoardDate {\r\n  boardData: BoardState;\r\n  boardTitle: string;\r\n}\r\n\r\nconst editBoardThunk = ({ boardData, boardTitle }: BoardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { user } = userSelector(state);\r\n      dispatch(editBoardData(boardData.boardId, boardTitle));\r\n      dispatch(getBoardsData(Object.keys(user.boards)));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default editBoardThunk;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTypedSelector } from '../../../core/hooks/useTypeSelector';\r\nimport { deleteCardData } from '../../../core/redux/action-creators/cards/cardAction';\r\nimport boardSelector from '../../../core/redux/selectors/boardSelector';\r\nimport BoardTitle from './styled/BoardTitle';\r\nimport DeleteRoundedIcon from '@mui/icons-material/DeleteRounded';\r\nimport { BoardState } from '../../../core/redux/types/boards/boardTypes';\r\nimport OptionWrap from '../cards/card/styled/OptionWrap';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport Input from '@mui/material/Input';\r\nimport cardSelector from '../../../core/redux/selectors/cardSelector';\r\nimport DeleteBoardModal from '../../../core/components/deleteBoardModal/deleteBoardModal';\r\nimport deleteBoardThunk from '../../../core/redux/thunk/board/deleteBoard';\r\nimport editBoardThunk from '../../../core/redux/thunk/board/editBoard';\r\n\r\ninterface BoardProps {\r\n  boardData: BoardState;\r\n  updateBoardsOrder: () => void;\r\n}\r\n\r\nconst Board: React.FC<BoardProps> = (props) => {\r\n  const { boardData, updateBoardsOrder } = props;\r\n\r\n  const { board } = useTypedSelector(boardSelector);\r\n  const cards = useTypedSelector(cardSelector).card;\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [modalIsOpen, setIsOpen] = useState(false);\r\n  const [boardState, setBoardate] = useState({\r\n    boardTitle: boardData.title\r\n  });\r\n  const { boardTitle } = boardState;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const isEditBoard = () => {\r\n    setIsEditing((prevIsEditing) => !prevIsEditing);\r\n  };\r\n\r\n  const editBoard = useCallback(() => {\r\n    const data = { boardData, boardTitle };\r\n    dispatch(editBoardThunk(data));\r\n    isEditBoard();\r\n  }, [boardData, boardTitle, dispatch]);\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Enter') {\r\n        editBoard();\r\n      }\r\n    },\r\n    [editBoard]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEditing) {\r\n      document.addEventListener('keydown', keyPress);\r\n      return () => document.removeEventListener('keydown', keyPress);\r\n    }\r\n  }, [keyPress, isEditing]);\r\n\r\n  const deleteCardsInBoard = (boardId: string) => {\r\n    const cardsInBoards = board[boardId].cards;\r\n    if (cardsInBoards) {\r\n      const cardsId = Object.keys(cardsInBoards);\r\n      cardsId.map((cardId) => {\r\n        dispatch(deleteCardData(cardId, cards));\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteBoard = (boardId: string) => {\r\n    const data = {\r\n      deleteCardsInBoard,\r\n      boardId,\r\n      updateBoardsOrder\r\n    };\r\n    dispatch(deleteBoardThunk(data));\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setBoardate((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const delBoard = () => deleteBoard(boardData.boardId);\r\n\r\n  const openDeleteBoardModal = () => {\r\n    setIsOpen((prevIsOpen) => !prevIsOpen);\r\n  };\r\n\r\n  if (isEditing) {\r\n    return (\r\n      <BoardTitle>\r\n        <Input\r\n          placeholder={boardData.title}\r\n          type=\"text\"\r\n          name=\"boardTitle\"\r\n          value={boardTitle}\r\n          onChange={handleChange}\r\n        />\r\n        <OptionWrap>\r\n          <CheckIcon onClick={editBoard} />\r\n          <CloseIcon onClick={isEditBoard} />\r\n        </OptionWrap>\r\n      </BoardTitle>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <BoardTitle>\r\n        {boardData.order}\r\n        {':'}\r\n        {boardData.title}\r\n        <OptionWrap>\r\n          <CreateIcon onClick={isEditBoard} />\r\n          <DeleteRoundedIcon onClick={openDeleteBoardModal} />\r\n        </OptionWrap>\r\n      </BoardTitle>\r\n      <DeleteBoardModal\r\n        modalIsOpen={modalIsOpen}\r\n        setIsOpen={setIsOpen}\r\n        delBoard={delBoard}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import styled from 'styled-components';\r\nimport colors from '../../../core/constants/colors';\r\n\r\nconst BoardWrap = styled.div`\r\n  display: flex;\r\n  position: relative;\r\n  justify-items: center;\r\n  height: 100%;\r\n  min-height: 88vh;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  border-radius: 10px;\r\n  overflow-x: auto;\r\n  border: 2px ${colors.formMainColor} solid;\r\n`;\r\n\r\nexport default BoardWrap;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\nimport mediaQueries from '../../../../core/constants/mediaQueries';\r\n\r\nconst BoardStyled = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  width: 290px;\r\n  min-width: 290px;\r\n  height: 100%;\r\n  margin: 10px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n\r\n  @media ${mediaQueries.mediaMobile} {\r\n    && {\r\n      min-width: 260px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default BoardStyled;\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport { writeBoardData } from '../../action-creators/boards/boardAction';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { writeUserBoardData } from '../../action-creators/users/userAction';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport boardSelector from '../../selectors/boardSelector';\r\nimport authSelector from '../../selectors/authSelector';\r\n\r\ninterface CardDate {\r\n  getCurrentUserData: () => void;\r\n  setBoardState: (\r\n    value: React.SetStateAction<{\r\n      boardTitle: string;\r\n    }>\r\n  ) => void;\r\n  boardTitle: string;\r\n  createOrderNum: () => number;\r\n}\r\n\r\nconst addBoardThunk = ({\r\n  getCurrentUserData,\r\n  setBoardState,\r\n  boardTitle,\r\n  createOrderNum\r\n}: CardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { currentUser } = authSelector(state);\r\n      const { board } = boardSelector(state);\r\n      const boardId = uuidv4();\r\n      const order = createOrderNum();\r\n      dispatch(writeBoardData(boardId, order, boardTitle, board));\r\n      dispatch(writeUserBoardData(currentUser, boardId));\r\n      setBoardState({ boardTitle: '' });\r\n      getCurrentUserData();\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default addBoardThunk;\r\n","import { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { updateBoardOrderData } from '../../action-creators/boards/boardAction';\r\nimport { BoardState } from '../../types/boards/boardTypes';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\n\r\ninterface ChangeCardOrder {\r\n  filterBoards: () => BoardState[];\r\n  currentBoard: BoardState;\r\n  boardData: BoardState;\r\n}\r\n\r\nconst changeBoardOrderDnDThunk = ({\r\n  filterBoards,\r\n  currentBoard,\r\n  boardData\r\n}: ChangeCardOrder) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>\r\n  ): Promise<void> => {\r\n    try {\r\n      filterBoards().map((board) => {\r\n        const isCurrentBoard = board.boardId === currentBoard.boardId;\r\n\r\n        const isFirstBoard =\r\n          board.order <= boardData.order &&\r\n          board.order > currentBoard.order &&\r\n          currentBoard.order < boardData.order;\r\n\r\n        const isLastBoard =\r\n          board.order >= boardData.order &&\r\n          board.order < currentBoard.order &&\r\n          currentBoard.order > boardData.order;\r\n\r\n        if (isCurrentBoard) {\r\n          dispatch(updateBoardOrderData(board.boardId, boardData.order));\r\n        } else if (isFirstBoard) {\r\n          dispatch(updateBoardOrderData(board.boardId, board.order - 1));\r\n        } else if (isLastBoard) {\r\n          dispatch(updateBoardOrderData(board.boardId, board.order + 1));\r\n        }\r\n      });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default changeBoardOrderDnDThunk;\r\n","import { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport {\r\n  deleteCardIdData,\r\n  getBoardsData\r\n} from '../../action-creators/boards/boardAction';\r\nimport {\r\n  deleteCardData,\r\n  writeBoardCardData,\r\n  writeCardData\r\n} from '../../action-creators/cards/cardAction';\r\nimport { BoardState } from '../../types/boards/boardTypes';\r\nimport { CardState } from '../../types/cards/cardTypes';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport userSelector from '../../selectors/userSelector';\r\nimport cardSelector from '../../selectors/cardSelector';\r\n\r\ninterface ChangeCardOrder {\r\n  setIsUpdateCards: (value: React.SetStateAction<boolean>) => void;\r\n  currentCard: CardState;\r\n  boardData: BoardState;\r\n  currentBordIdcard: string;\r\n}\r\n\r\nconst pushTheFirstCardToAnotherBoardThunk = ({\r\n  setIsUpdateCards,\r\n  currentCard,\r\n  currentBordIdcard,\r\n  boardData\r\n}: ChangeCardOrder) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { user } = userSelector(state);\r\n      const { card } = cardSelector(state);\r\n      dispatch(deleteCardData(currentCard.cardId, card));\r\n      dispatch(deleteCardIdData(currentCard.cardId, currentBordIdcard));\r\n      setIsUpdateCards(true);\r\n      dispatch(\r\n        writeCardData(currentCard.cardId, 1, currentCard.title, 'none', card)\r\n      );\r\n      dispatch(writeBoardCardData(boardData.boardId, currentCard.cardId));\r\n      dispatch(getBoardsData(Object.keys(user.boards)));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default pushTheFirstCardToAnotherBoardThunk;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Header from '../../core/components/header/Header';\r\nimport { useTypedSelector } from '../../core/hooks/useTypeSelector';\r\nimport {\r\n  getBoardsData,\r\n  updateBoardOrderData\r\n} from '../../core/redux/action-creators/boards/boardAction';\r\nimport { getUserData } from '../../core/redux/action-creators/users/userAction';\r\nimport authSelector from '../../core/redux/selectors/authSelector';\r\nimport boardSelector from '../../core/redux/selectors/boardSelector';\r\nimport userSelector from '../../core/redux/selectors/userSelector';\r\nimport { BoardState } from '../../core/redux/types/boards/boardTypes';\r\nimport AddBoard from './AddBoard/AddBoard';\r\nimport Cards from './cards/Cards';\r\nimport Board from './board/Board';\r\nimport BoardWrap from './styled/BoardWrap';\r\nimport BoardStyled from './board/styled/BoardStyled';\r\nimport sortData from '../../core/helpers/sortData';\r\nimport addBoardThunk from '../../core/redux/thunk/main/addBoard';\r\nimport changeBoardOrderDnDThunk from '../../core/redux/thunk/main/changeBoardOrderDnD';\r\nimport pushTheFirstCardToAnotherBoardThunk from '../../core/redux/thunk/main/pushTheFirstCardToAnotherBoard';\r\n\r\nconst boardNameId = 'board';\r\n\r\nconst Main: React.FC = () => {\r\n  const { currentUser } = useTypedSelector(authSelector);\r\n  const { user } = useTypedSelector(userSelector);\r\n  const { board } = useTypedSelector(boardSelector);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [boardState, setBoardState] = useState({\r\n    boardTitle: ''\r\n  });\r\n  const { boardTitle } = boardState;\r\n  const [currentItemNameId, setCurrentItemNameId] = useState(null);\r\n  const [currentBoard, setCurrentBoard] = useState(null);\r\n\r\n  const [currentBordIdcard, setCurrentBordIdcard] = useState(null);\r\n  const [currentCard, setCurrentCard] = useState(null);\r\n  const [isUpdateCards, setIsUpdateCards] = useState(false);\r\n\r\n  const getCurrentUserData = () => {\r\n    dispatch(getUserData(currentUser));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserData(currentUser));\r\n  }, [currentUser, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (user && user.boards) {\r\n      dispatch(getBoardsData(Object.keys(user.boards)));\r\n    }\r\n  }, [dispatch, user]);\r\n\r\n  const handleChangeBoard = (event: React.ChangeEvent) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setBoardState((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const filterBoards = () => {\r\n    return Object.keys(user?.boards ?? {})\r\n      .map((boardId) => {\r\n        return board?.[boardId];\r\n      })\r\n      .filter((board) => board);\r\n  };\r\n\r\n  const createOrderNum = () => {\r\n    if (user.boards) {\r\n      return Object.keys(user.boards).length + 1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  };\r\n\r\n  const addBoard = () => {\r\n    const data = {\r\n      getCurrentUserData,\r\n      setBoardState,\r\n      boardTitle,\r\n      createOrderNum\r\n    };\r\n    dispatch(addBoardThunk(data));\r\n  };\r\n\r\n  const dataToRender = Object.values(filterBoards() ?? []);\r\n\r\n  const updateBoardsOrder = () => {\r\n    filterBoards()\r\n      .sort(sortData)\r\n      .forEach((board, index) => {\r\n        dispatch(updateBoardOrderData(board.boardId, index + 1));\r\n      });\r\n  };\r\n\r\n  const dragStartHandler = (\r\n    event: React.DragEvent<HTMLDivElement>,\r\n    boardData: BoardState\r\n  ) => {\r\n    const elemName = (event.target as Element).id;\r\n    setCurrentItemNameId(elemName);\r\n    setCurrentBoard(boardData);\r\n  };\r\n\r\n  const dragOverHandler = (event: React.DragEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const changeBoardOrderDnD = (boardData: BoardState) => {\r\n    const data = { filterBoards, currentBoard, boardData };\r\n    dispatch(changeBoardOrderDnDThunk(data));\r\n  };\r\n\r\n  const pushTheFirstCardToAnotherBoard = (boardData: BoardState) => {\r\n    const data = {\r\n      setIsUpdateCards,\r\n      currentCard,\r\n      currentBordIdcard,\r\n      boardData\r\n    };\r\n    dispatch(pushTheFirstCardToAnotherBoardThunk(data));\r\n  };\r\n\r\n  const dropHandler = (\r\n    event: React.DragEvent<HTMLDivElement>,\r\n    boardData: BoardState\r\n  ) => {\r\n    event.preventDefault();\r\n    const isBoard = currentItemNameId === boardNameId;\r\n    if (isBoard) {\r\n      changeBoardOrderDnD(boardData);\r\n    } else if (!boardData.cards) {\r\n      pushTheFirstCardToAnotherBoard(boardData);\r\n    }\r\n    getCurrentUserData();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <BoardWrap>\r\n        {board &&\r\n          dataToRender.sort(sortData).map((boardData) => {\r\n            return (\r\n              board && (\r\n                <BoardStyled\r\n                  key={boardData.boardId}\r\n                  id=\"board\"\r\n                  onDragStart={(event) => dragStartHandler(event, boardData)}\r\n                  onDragOver={(event) => dragOverHandler(event)}\r\n                  onDrop={(event) => dropHandler(event, boardData)}\r\n                  draggable={true}\r\n                >\r\n                  <Board\r\n                    boardData={boardData}\r\n                    updateBoardsOrder={updateBoardsOrder}\r\n                  />\r\n                  <Cards\r\n                    boardId={boardData.boardId}\r\n                    currentCard={currentCard}\r\n                    setCurrentCard={setCurrentCard}\r\n                    currentBordIdcard={currentBordIdcard}\r\n                    setCurrentBordIdcard={setCurrentBordIdcard}\r\n                    currentItemNameId={currentItemNameId}\r\n                    setCurrentItemNameId={setCurrentItemNameId}\r\n                    isUpdateCards={isUpdateCards}\r\n                    setIsUpdateCards={setIsUpdateCards}\r\n                  />\r\n                </BoardStyled>\r\n              )\r\n            );\r\n          })}\r\n        <AddBoard\r\n          title={boardTitle}\r\n          name=\"boardTitle\"\r\n          handleChange={handleChangeBoard}\r\n          addBoard={addBoard}\r\n        />\r\n      </BoardWrap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import firebase from 'firebase/compat/app';\r\nimport { SetUserActionType, SetUserTypes } from '../../types/auth/setUserTypes';\r\n\r\nconst setUserInitiate = (user: firebase.User | null): SetUserActionType => ({\r\n  type: SetUserTypes.SET_USER,\r\n  payload: user\r\n});\r\n\r\nexport default setUserInitiate;\r\n","enum languages {\r\n  ru = 'ru',\r\n  en = 'en'\r\n}\r\n\r\nexport default languages;\r\n","import React from 'react';\r\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\r\nimport MainRoutes from './core/constants/MainRouters';\r\nimport { useTypedSelector } from './core/hooks/useTypeSelector';\r\nimport authSelector from './core/redux/selectors/authSelector';\r\n\r\ninterface PrivateRouteProps extends RouteProps {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  component: any;\r\n}\r\n\r\nconst PrivateRoute = (props: PrivateRouteProps): JSX.Element => {\r\n  const { component: Component, ...rest } = props;\r\n\r\n  const { currentUser } = useTypedSelector(authSelector);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        currentUser === null ? (\r\n          <Redirect to={MainRoutes.login} />\r\n        ) : (\r\n          <Component {...props} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import firebase from 'firebase/compat/app';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport AppWrapper from './core/components/appWrapper/AppWrapper';\r\nimport MainRoutes from './core/constants/MainRouters';\r\nimport { auth } from './core/firebase/firebase';\r\nimport Login from './pages/auth/login/Login';\r\nimport Register from './pages/auth/register/Register';\r\nimport Main from './pages/main/Main';\r\nimport setUserInitiate from './core/redux/action-creators/auth/setUserAction';\r\nimport PrivateRoute from './privateRouter';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nconst App: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser: firebase.User) => {\r\n      if (authUser) {\r\n        dispatch(setUserInitiate(authUser));\r\n      } else {\r\n        dispatch(setUserInitiate(null));\r\n      }\r\n    });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <AppWrapper>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <PrivateRoute exact path={MainRoutes.main} component={Main} />\r\n          <Route path={MainRoutes.login} component={Login} />\r\n          <Route path={MainRoutes.register} component={Register} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n      <ToastContainer />\r\n    </AppWrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport languages from '../constants/languages';\r\nimport translationEn from './locales/translationEn.json';\r\nimport translationRu from './locales/translationRu.json';\r\n\r\ni18n.use(initReactI18next).init({\r\n  resources: {\r\n    ru: { translation: translationRu },\r\n    en: { translation: translationEn }\r\n  },\r\n  lng: languages.ru,\r\n  fallbackLng: languages.ru,\r\n  interpolation: { escapeValue: false }\r\n});\r\n\r\nexport default i18n;\r\n","import firebase from 'firebase/compat/app';\r\nimport {\r\n  GoogleSignInAction,\r\n  GoogleSignInTypes\r\n} from '../types/auth/googleSignInTypes';\r\nimport { LoginAction, LoginActionTypes } from '../types/auth/loginTypes';\r\nimport { LogoutAction, LogoutActionTypes } from '../types/auth/logoutTypes';\r\nimport {\r\n  RegisterAction,\r\n  RegisterActionTypes\r\n} from '../types/auth/registerTypes';\r\nimport { SetUserActionType, SetUserTypes } from '../types/auth/setUserTypes';\r\n\r\nexport interface AuthState {\r\n  loading: boolean;\r\n  currentUser: firebase.User;\r\n  error: firebase.User | string;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  loading: false,\r\n  currentUser: null,\r\n  error: null\r\n};\r\n\r\ntype ActionTypes =\r\n  | GoogleSignInAction\r\n  | LoginAction\r\n  | LogoutAction\r\n  | RegisterAction\r\n  | SetUserActionType;\r\n\r\nconst authReducer = (state = initialState, action: ActionTypes): AuthState => {\r\n  switch (action.type) {\r\n    case RegisterActionTypes.REGISTER_START:\r\n    case LoginActionTypes.LOGIN_START:\r\n    case LogoutActionTypes.LOGOUT_START:\r\n    case GoogleSignInTypes.GOOGLE_SIGN_IN_START:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    case LogoutActionTypes.LOGOUT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentUser: null\r\n      };\r\n    case SetUserTypes.SET_USER:\r\n    case RegisterActionTypes.REGISTER_SUCCESS:\r\n    case LoginActionTypes.LOGIN_SUCCESS:\r\n    case GoogleSignInTypes.GOOGLE_SIGN_IN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        currentUser: action.payload\r\n      };\r\n    case RegisterActionTypes.REGISTER_FAIL:\r\n    case LoginActionTypes.LOGIN_FAIL:\r\n    case LogoutActionTypes.LOGOUT_FAIL:\r\n    case GoogleSignInTypes.GOOGLE_SIGN_IN_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n","import {\r\n  BoardAction,\r\n  BoardActionTypes,\r\n  BoardState\r\n} from '../types/boards/boardTypes';\r\n\r\nexport interface InitBoardState {\r\n  board: {\r\n    [id: string]: BoardState;\r\n  };\r\n  isLoading: boolean;\r\n  error: string;\r\n}\r\n\r\nconst initialState: InitBoardState = {\r\n  board: null,\r\n  isLoading: false,\r\n  error: null\r\n};\r\n\r\nconst userReducer = (\r\n  state = initialState,\r\n  action: BoardAction\r\n): InitBoardState => {\r\n  switch (action.type) {\r\n    case BoardActionTypes.BOARD_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      };\r\n    case BoardActionTypes.BOARD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        board: action.payload\r\n      };\r\n    case BoardActionTypes.BOARD_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","import {\r\n  CardAction,\r\n  CardActionTypes,\r\n  CardState\r\n} from '../types/cards/cardTypes';\r\n\r\nexport interface InitCardState {\r\n  card: {\r\n    [id: string]: CardState;\r\n  };\r\n  isLoading: boolean;\r\n  error: string;\r\n}\r\n\r\nconst initialState: InitCardState = {\r\n  card: null,\r\n  isLoading: false,\r\n  error: null\r\n};\r\n\r\nconst userReducer = (\r\n  state = initialState,\r\n  action: CardAction\r\n): InitCardState => {\r\n  switch (action.type) {\r\n    case CardActionTypes.CARD_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      };\r\n    case CardActionTypes.CARD_SUCCSES:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        card: action.payload\r\n      };\r\n    case CardActionTypes.CARD_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","import {\r\n  UserAction,\r\n  UserActionTypes,\r\n  UserState\r\n} from '../types/users/userTypes';\r\n\r\nexport interface InitUserState {\r\n  user: UserState;\r\n  isLoading: boolean;\r\n  error: string;\r\n}\r\n\r\nconst initialState: InitUserState = {\r\n  user: {\r\n    userId: '',\r\n    username: '',\r\n    email: '',\r\n    boards: {\r\n      '': { boardId: '' }\r\n    }\r\n  },\r\n  error: null,\r\n  isLoading: false\r\n};\r\n\r\nconst userReducer = (\r\n  state = initialState,\r\n  action: UserAction\r\n): InitUserState => {\r\n  switch (action.type) {\r\n    case UserActionTypes.USER_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      };\r\n    case UserActionTypes.USER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        user: action.payload\r\n      };\r\n    case UserActionTypes.USER_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","import {\r\n  UsersAction,\r\n  UsersActionTypes,\r\n  UsersState\r\n} from '../types/users/usersTypes';\r\n\r\nexport interface InitUsersState {\r\n  users: {\r\n    [id: string]: UsersState;\r\n  };\r\n  isLoading: boolean;\r\n  error: string;\r\n}\r\n\r\nconst initialState: InitUsersState = {\r\n  users: null,\r\n  error: null,\r\n  isLoading: false\r\n};\r\n\r\nconst userReducer = (\r\n  state = initialState,\r\n  action: UsersAction\r\n): InitUsersState => {\r\n  switch (action.type) {\r\n    case UsersActionTypes.USERS_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      };\r\n    case UsersActionTypes.USERS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        users: action.payload\r\n      };\r\n    case UsersActionTypes.USERS_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","import { combineReducers } from 'redux';\r\nimport authReducer from './authReducer';\r\nimport boardReducer from './boardReducer';\r\nimport cardReducer from './cardReducer';\r\nimport userReducer from './userReducer';\r\nimport usersReducer from './usersReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  board: boardReducer,\r\n  user: userReducer,\r\n  auth: authReducer,\r\n  card: cardReducer,\r\n  users: usersReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { rootReducer } from './reducer/rootReducer';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst Global = createGlobalStyle`\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box; \r\n  font-family: Roboto;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n}\r\n\r\na { \r\n  text-decoration: none;\r\n}\r\n`;\r\n\r\nexport default Global;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport './core/i18n/i18n';\r\nimport { store } from './core/redux/store';\r\nimport GlobalStyled from './globalStyled';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <GlobalStyled />\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}