{"version":3,"sources":["core/constants/colors.ts","core/constants/MainRouters.ts","core/components/AppContainer/AppContainer.tsx","core/firebase/firebase.ts","core/constants/mediaQueries.ts","core/components/authContent/AuthContent.tsx","core/redux/types/auth/googleSignInTypes.ts","core/components/authForm/AuthForm.tsx","core/hooks/useTypeSelector.ts","core/redux/selectors/authSelector.ts","core/components/buttons/AuthButtons.tsx","core/components/buttons/GoogleButton.tsx","core/components/buttons/SingInButton.tsx","core/components/buttons/SingUpButton.tsx","core/helpers/userRef.ts","core/redux/action-creators/auth/googleSignInAction.ts","core/constants/authErrors.ts","core/redux/thunk/auth/googleSignInInitiate.ts","core/redux/types/auth/loginTypes.ts","core/redux/action-creators/auth/loginAction.ts","core/constants/languages.ts","core/i18n/i18n.ts","core/redux/types/auth/registerTypes.ts","core/constants/toastRules.ts","pages/auth/login/Login.tsx","core/redux/thunk/auth/loginInitiate.ts","pages/auth/login/validate/validate.ts","core/redux/action-creators/auth/registerAction.ts","core/redux/types/users/userTypes.ts","core/redux/action-creators/users/userAction.ts","core/redux/types/auth/logoutTypes.ts","core/constants/regexp.ts","pages/auth/register/Register.tsx","core/redux/thunk/auth/registerInitiate.ts","pages/auth/register/validate/validate.ts","core/redux/thunk/users/writeUserData.ts","core/redux/selectors/userSelector.ts","core/redux/action-creators/auth/logoutAction.ts","core/redux/types/cards/cardTypes.ts","core/components/modals/modalStyled/CancelButton.tsx","core/components/modals/modalStyled/ExitButton.tsx","core/components/modals/modalStyled/ModalBackground.tsx","core/components/modals/modalStyled/ModalContent.tsx","core/components/modals/modalStyled/ModalIcon.tsx","core/components/modals/modalStyled/ModalWrapper.tsx","core/components/modals/closeModal/CloseModal.tsx","core/redux/thunk/auth/logoutInitiate.ts","core/components/header/styled/HeaderButtonContainer.tsx","core/components/header/styled/HeaderContentContainer.tsx","core/components/header/styled/HeaderContainer.tsx","core/components/header/styled/HeaderWelcome.tsx","core/components/header/Header.tsx","core/redux/selectors/boardSelector.ts","core/components/buttons/AddButton.tsx","core/components/addContainer/AddContainer.tsx","core/components/buttons/AddContainerButton.tsx","core/components/closeIcon/CloseIcon.tsx","pages/main/AddBoard/AddBoard.tsx","core/helpers/sortData.ts","core/redux/selectors/cardSelector.ts","core/helpers/cardRef.ts","core/redux/action-creators/cards/cardAction.ts","core/redux/types/boards/boardTypes.ts","core/redux/thunk/cards/writeCardData.ts","core/helpers/boardRef.ts","core/redux/thunk/cards/writeBoardCardData.ts","core/redux/action-creators/boards/boardAction.ts","core/redux/types/auth/setUserTypes.ts","core/redux/thunk/boards/getBoardsData.ts","core/redux/thunk/cards/AddCard.ts","core/redux/thunk/boards/deleteCardIdData.ts","core/redux/thunk/cards/deleteCardData.ts","core/redux/thunk/cards/updateCardOrderData.ts","core/redux/thunk/cards/changeCardOrderBetweenBoards.ts","core/redux/thunk/cards/changeCardOrderInBoard.ts","core/redux/thunk/cards/dropHandler.ts","core/redux/thunk/cards/getCardsData.ts","pages/main/AddCard/AddCard.tsx","pages/main/cards/styled/CardsContainer.tsx","pages/main/cards/card/styled/OptionContainer.tsx","core/components/modals/deleteCardModal/deleteCardModal.tsx","core/redux/thunk/cards/deleteCard.ts","core/redux/thunk/cards/editCardData.ts","core/redux/thunk/cards/editCard.ts","pages/main/cards/card/Card.tsx","pages/main/cards/Cards.tsx","pages/main/board/styled/BoardTitle.tsx","core/components/modals/deleteBoardModal/deleteBoardModal.tsx","core/redux/thunk/boards/deleteBoardData.ts","core/redux/thunk/users/deleteBoardIdData.ts","core/redux/thunk/users/getUserData.ts","core/redux/thunk/boards/deleteBoard.ts","core/redux/thunk/boards/editBoardData.ts","core/redux/thunk/boards/editBoard.ts","pages/main/board/Board.tsx","pages/main/board/styled/BoardContainer.tsx","core/redux/thunk/boards/writeBoardData.ts","core/redux/thunk/users/writeUserBoardData.ts","core/redux/thunk/boards/addBoard.ts","core/redux/thunk/boards/pushTheFirstCardToAnotherBoard.ts","core/redux/thunk/boards/updateBoardOrderData.ts","core/redux/thunk/boards/changeBoardOrder.ts","pages/main/styled/BoardsContainer.tsx","pages/main/Main.tsx","core/redux/action-creators/auth/setUserAction.ts","privateRouter.tsx","App.tsx","core/redux/reducer/authReducer.ts","core/redux/reducer/boardReducer.ts","core/redux/reducer/cardReducer.ts","core/redux/reducer/userReducer.ts","core/redux/reducer/rootReducer.ts","core/redux/store.ts","globalStyled.tsx","index.tsx"],"names":["Colors","MainRoutes","AppContainer","styled","div","wrapper","dotenv","config","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","MediaQueries","auth","googleAuthProvider","GoogleAuthProvider","firestore","GamePageMain","GoogleSignInTypes","AuthForm","form","formBackground","formShadow","formMainColor","mediaTablet","mediaMobile","useTypedSelector","useSelector","authSelector","state","AuthButtons","GoogleButton","button","withoutColor","SingInButton","formDefaultColor","formMainFocusColor","SingUpButton","usersRef","userId","usersBoardsRef","boardId","userGoogleRef","userGoogle","uid","AuthError","googleSignInSuccess","user","type","GOOGLE_SIGN_IN_SUCCESS","payload","writeUserGoogleData","a","db","getDatabase","userCountRef","ref","update","username","displayName","email","errorMessage","message","LoginActionTypes","Languages","loginSuccess","LOGIN_SUCCESS","i18n","use","initReactI18next","init","resources","ru","translation","translationRu","en","translationEn","lng","fallbackLng","interpolation","escapeValue","RegisterActionTypes","toastRyles","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","Login","dispatch","useDispatch","t","useTranslation","history","useHistory","currentUser","formik","useFormik","initialValues","password","onSubmit","values","errors","validate","errorsValues","Object","length","forEach","toast","warn","LOGIN_START","signInWithEmailAndPassword","FirebaseError","userNotFound","code","error","LOGIN_FAIL","useEffect","push","main","AuthContent","handleSubmit","onClick","GOOGLE_SIGN_IN_START","signInWithPopup","GOOGLE_SIGN_IN_FAIL","TextField","id","label","name","value","onChange","handleChange","to","register","UserActionTypes","registerSuccess","REGISTER_SUCCESS","LogoutActionTypes","userStart","USER_START","userSuccess","USER_SUCCESS","userFail","USER_FAIL","regexp","regPasswordRules","regMailRules","Register","passwordConfirm","test","REGISTER_START","createUserWithEmailAndPassword","updateProfile","emailAlreadyInUse","REGISTER_FAIL","boards","key","set","login","userSelector","CardActionTypes","CancelButton","ExitButton","colors","ModalBackground","closeModalBackgroundBackground","ModalContent","Color","closeModalContentColor","ModalIcon","CloseIcon","ModalWrapper","closeModalWrapperBackground","closeModalWrapperColor","CloseModal","props","modalIsOpen","setIsOpen","modalRef","useRef","keyPress","useCallback","event","document","addEventListener","removeEventListener","showModal","prev","handleAuth","LOGOUT_START","signOut","LOGOUT_SUCCESS","LOGOUT_FAIL","current","target","MainRouters","HeaderButtonStyled","headerButtonStyledColor","HeaderContentWidth","mediaQueries","mediaTabletSmall","HeaderStyled","headerStyledBackground","headerStyledColor","HeaderContentContainer","HeaderWelcome","h2","mediaLaptop","Header","useState","HeaderContainer","HeaderButtonContainer","prevIsOpen","boardSelector","board","AddButton","addBoardButtonColor","AddContainer","AddContainerButton","CloseIconElement","AddBoard","isOpenAddWrap","setIsOpenAddWrap","title","addBoard","openAddWrap","prevIsOpenAddWrap","Input","placeholder","sortData","b","order","cardSelector","card","cardsIdRef","cardId","BoardActionTypes","cardStart","CARD_START","cardSuccess","CARD_SUCCESS","cardFail","CARD_FAIL","writeCardData","textContent","cards","boardIdRef","boardCardIdRef","writeBoardCardData","SetUserTypes","boardStart","BOARD_START","boardSuccess","BOARD_SUCCESS","boardFail","BOARD_FAIL","getBoardsData","boardsId","Promise","all","map","get","boardsData","allBoards","snapshot","val","finalBoards","reduce","acc","addCardThunk","createOrderNumCard","setCardState","cardTitle","getState","uuidv4","keys","deleteCardIdData","remove","deleteCardData","updateCardOrderData","orderNum","changeCardOrderBetweenBoardsThunk","updateCardsOrder","currentCard","currentBoardIdCard","cardData","getCardsForCurrentBoard","cardItem","changeCardOrderInBoardThunk","isCurrentCard","isFirstCard","isLastCard","dropHandlerThunk","currentItemNameId","cardNameId","changeCardOrderInBoard","changeCardOrderBetweenBoards","isCurrentBoard","getCardsData","cardsId","cardsData","allCards","finalCards","AddCard","isOpenCardWrap","setIsOpenCardWrap","addCard","openCardWrap","prevCardWrap","CardStyled","defaultBlackColor","OptionWrap","DeleteCardModal","deleteCard","deleteCardThunk","getCardsId","editCardData","editCardThunk","Card","isEditing","setIsEditing","cardState","updateEditCard","editCard","CardsContainer","prevState","OptionContainer","Cards","setCurrentCard","setCurrentBoardIdCard","setCurrentItemNameId","isUpdateCards","setIsUpdateCards","allCardsId","filter","finalCardsId","assign","element","indexOf","currentBoardId","sort","index","dragOverHandler","preventDefault","dragStart","elemName","dragStartHandler","dragDrop","dropHandler","dataToRender","onDragStart","onDragOver","onDrop","BoardTitle","DeleteBoardModal","delBoard","deleteBoardData","deleteBoardIdData","getUserData","exists","data","deleteBoardThunk","deleteCardsInBoard","updateBoardsOrder","editBoardData","boardTitle","editBoardThunk","boardData","Board","boardState","setBoardState","isEditBoard","prevIsEditing","editBoard","cardsInBoards","BoardStyled","writeBoardData","writeUserBoardData","addBoardThunk","getCurrentUserData","createOrderNum","pushTheFirstCardToAnotherBoardThunk","updateBoardOrderData","changeBoardOrderThunk","filterBoards","currentBoard","isFirstBoard","isLastBoard","BoardsContainer","Main","setCurrentBoard","changeBoardOrder","pushTheFirstCardToAnotherBoard","BoardContainer","setUserInitiate","SET_USER","PrivateRoute","Component","component","rest","render","App","onAuthStateChanged","authUser","basename","exact","path","initialState","loading","authReducer","action","isLoading","userReducer","rootReducer","combineReducers","boardReducer","cardReducer","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Global","createGlobalStyle","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c1790ea7.chunk.js","sourcesContent":["enum Colors {\r\n  wrapper = 'linear-gradient(45deg, #EEE4EA, #E4E8F9)',\r\n  formBackground = '#fff',\r\n  formShadow = 'rgba(34, 60, 80, 0.42)',\r\n  formMainColor = '#8298f9',\r\n  formMainFocusColor = '#7854ff',\r\n  formDefaultColor = '#fff',\r\n  loaderBorder = '#f3f3f3',\r\n  loaderBorderTop = '#3498db',\r\n  withoutColor = 'transparent',\r\n  defaultBlackColor = '#000',\r\n\r\n  addBoardButtonColor = '#1967ff',\r\n\r\n  headerStyledBackground = '#82abfb',\r\n  headerStyledColor = '#fff',\r\n\r\n  closeModalWrapperBackground = '#fff',\r\n  closeModalWrapperColor = '#000',\r\n\r\n  closeModalContentColor = '#141414',\r\n  closeModalContentButtonBackground = '#141414',\r\n  closeModalContentButtonColor = '#fff',\r\n\r\n  headerButtonStyledColor = '#fff',\r\n  closeModalBackgroundBackground = 'rgba(0,0,0,0.8)'\r\n}\r\n\r\nexport default Colors;\r\n","enum MainRoutes {\n  main = '/',\n  login = '/Login',\n  register = '/Register'\n}\n\nexport default MainRoutes;\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\n\r\nconst AppContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 100vh;\r\n  background: ${Colors.wrapper};\r\n`;\r\n\r\nexport default AppContainer;\r\n","import dotenv from 'dotenv';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\n\ndotenv.config();\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\nconst db = firebase.firestore();\n\nexport { db, auth, googleAuthProvider };\n","enum MediaQueries {\r\n  laptopL = '(max-width: 1440px)',\r\n  mediaLaptop = '(max-width: 1024px)',\r\n  mediaTablet = '(max-width: 768px)',\r\n  mediaTabletSmall = '(max-width: 620px)',\r\n  mediaMobile = '(max-width: 425px)',\r\n  mediaMobileSmall = '(max-width: 320px)'\r\n}\r\n\r\nexport default MediaQueries;\r\n","import styled from 'styled-components';\n\nconst GamePageMain = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport default GamePageMain;\n","import firebase from 'firebase/compat/app';\n\nexport enum GoogleSignInTypes {\n  GOOGLE_SIGN_IN_START = 'GOOGLE_SIGN_IN_START',\n  GOOGLE_SIGN_IN_SUCCESS = 'GOOGLE_SIGN_IN_SUCCESS',\n  GOOGLE_SIGN_IN_FAIL = 'GOOGLE_SIGN_IN_FAIL'\n}\n\nexport interface GoogleSignInStartAction {\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_START;\n}\n\ninterface GoogleSignInSuccessAction {\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_SUCCESS;\n  payload: firebase.User | null;\n}\n\ninterface GoogleSignInFailAction {\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_FAIL;\n  payload: string;\n}\n\nexport type GoogleSignInAction =\n  | GoogleSignInStartAction\n  | GoogleSignInSuccessAction\n  | GoogleSignInFailAction;\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\nimport MediaQueries from '../../constants/mediaQueries';\r\n\r\nconst AuthForm = styled.form`\r\n  position: relative;\r\n  width: 400px;\r\n  height: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${Colors.formBackground};\r\n  border-radius: 20px;\r\n  padding: 20px;\r\n  box-shadow: 4px 4px 8px 0px ${Colors.formShadow};\r\n  color: ${Colors.formMainColor};\r\n  @media ${MediaQueries.mediaTablet} {\r\n    width: 350px;\r\n    height: 450px;\r\n  }\r\n  @media ${MediaQueries.mediaMobile} {\r\n    width: 300px;\r\n    height: 400px;\r\n  }\r\n`;\r\n\r\nexport default AuthForm;\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../redux/reducer/rootReducer';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { AuthState } from '../reducer/authReducer';\nimport { RootState } from '../reducer/rootReducer';\n\nconst authSelector = (state: RootState): AuthState => state.auth;\n\nexport default authSelector;\n","import styled from 'styled-components';\r\nimport MediaQueries from '../../constants/mediaQueries';\r\n\r\nconst AuthButtons = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 60%;\r\n  margin-top: 40px;\r\n\r\n  @media ${MediaQueries.mediaTablet} {\r\n    width: 70%;\r\n  }\r\n\r\n  @media ${MediaQueries.mediaMobile} {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport default AuthButtons;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\n\r\nconst GoogleButton = styled.button`\r\n  outline: none;\r\n  border: 0;\r\n  background: ${Colors.withoutColor};\r\n  margin: 20px 0;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default GoogleButton;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\n\r\nconst SingInButton = styled.button`\r\n  width: 90px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.formMainColor};\r\n  outline: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n  color: ${Colors.formDefaultColor};\r\n  &:hover {\r\n    background-color: ${Colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default SingInButton;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\n\r\nconst SingUpButton = styled.button`\r\n  width: 90px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.withoutColor};\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n  color: ${Colors.formMainColor};\r\n  &:hover {\r\n    border: 2px ${Colors.formMainFocusColor} solid;\r\n    color: ${Colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default SingUpButton;\r\n","import firebase from 'firebase/compat/app';\r\n\r\nexport const usersRef = (userId: string): string => `users/${userId}`;\r\nexport const usersBoardsRef = (userId: string, boardId: string): string =>\r\n  `users/${userId}/boards/${boardId}`;\r\nexport const userGoogleRef = (userGoogle: firebase.User): string =>\r\n  `users/${userGoogle.uid}`;\r\n","import firebase from 'firebase/compat/app';\r\nimport {\r\n  GoogleSignInAction,\r\n  GoogleSignInTypes\r\n} from '../../types/auth/googleSignInTypes';\r\n\r\nexport const googleSignInStart = (): GoogleSignInAction => ({\r\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_START\r\n});\r\n\r\nexport const googleSignInSuccess = (\r\n  user: firebase.User | null\r\n): GoogleSignInAction => ({\r\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_SUCCESS,\r\n  payload: user\r\n});\r\n\r\nexport const googleSignInFail = (error: string): GoogleSignInAction => ({\r\n  type: GoogleSignInTypes.GOOGLE_SIGN_IN_FAIL,\r\n  payload: error\r\n});\r\n","enum AuthError {\r\n  userNotFound = 'auth/user-not-found',\r\n  emailAlreadyInUse = 'auth/email-already-in-use'\r\n}\r\n\r\nexport default AuthError;\r\n","import firebase from 'firebase/compat/app';\r\nimport { getDatabase, ref, update } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { auth, googleAuthProvider } from '../../../firebase/firebase';\r\nimport { userGoogleRef } from '../../../helpers/userRef';\r\nimport {\r\n  googleSignInFail,\r\n  googleSignInStart,\r\n  googleSignInSuccess\r\n} from '../../action-creators/auth/googleSignInAction';\r\nimport { GoogleSignInAction } from '../../types/auth/googleSignInTypes';\r\n\r\nconst writeUserGoogleData = async (userGoogle: firebase.User) => {\r\n  try {\r\n    const db = getDatabase();\r\n    const userCountRef = ref(db, userGoogleRef(userGoogle));\r\n    await update(userCountRef, {\r\n      userId: userGoogle.uid,\r\n      username: userGoogle.displayName,\r\n      email: userGoogle.email\r\n    });\r\n  } catch (error) {\r\n    const errorMessage = (error as Error).message;\r\n    return errorMessage;\r\n  }\r\n};\r\n\r\nexport const googleSignInInitiate = () => {\r\n  return async (dispatch: Dispatch<GoogleSignInAction>): Promise<void> => {\r\n    try {\r\n      dispatch(googleSignInStart());\r\n      const { user } = await auth.signInWithPopup(googleAuthProvider);\r\n      const res = await writeUserGoogleData(user);\r\n      if (!res) {\r\n        dispatch(googleSignInSuccess(user));\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(googleSignInFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import firebase from 'firebase/compat/app';\n\nexport enum LoginActionTypes {\n  LOGIN_START = 'LOGIN_START',\n  LOGIN_SUCCESS = 'LOGIN_SUCCESS',\n  LOGIN_FAIL = 'LOGIN_FAIL'\n}\n\nexport interface LoginStartAction {\n  type: LoginActionTypes.LOGIN_START;\n}\n\ninterface LoginSuccessAction {\n  type: LoginActionTypes.LOGIN_SUCCESS;\n  payload: firebase.User | null;\n}\n\ninterface LoginFailAction {\n  type: LoginActionTypes.LOGIN_FAIL;\n  payload: string;\n}\n\nexport type LoginAction =\n  | LoginStartAction\n  | LoginSuccessAction\n  | LoginFailAction;\n","import firebase from 'firebase/compat/app';\r\nimport { LoginAction, LoginActionTypes } from '../../types/auth/loginTypes';\r\n\r\nexport const loginStart = (): LoginAction => ({\r\n  type: LoginActionTypes.LOGIN_START\r\n});\r\n\r\nexport const loginSuccess = (user: firebase.User): LoginAction => ({\r\n  type: LoginActionTypes.LOGIN_SUCCESS,\r\n  payload: user\r\n});\r\n\r\nexport const loginFail = (error: string): LoginAction => ({\r\n  type: LoginActionTypes.LOGIN_FAIL,\r\n  payload: error\r\n});\r\n","enum Languages {\r\n  ru = 'ru',\r\n  en = 'en'\r\n}\r\n\r\nexport default Languages;\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport Languages from '../constants/languages';\r\nimport translationEn from './locales/translationEn.json';\r\nimport translationRu from './locales/translationRu.json';\r\n\r\ni18n.use(initReactI18next).init({\r\n  resources: {\r\n    ru: { translation: translationRu },\r\n    en: { translation: translationEn }\r\n  },\r\n  lng: Languages.ru,\r\n  fallbackLng: Languages.ru,\r\n  interpolation: { escapeValue: false }\r\n});\r\n\r\nexport default i18n;\r\n","import firebase from 'firebase/compat/app';\n\nexport enum RegisterActionTypes {\n  REGISTER_START = 'REGISTER_START',\n  REGISTER_SUCCESS = 'REGISTER_SUCCESS',\n  REGISTER_FAIL = 'REGISTER_FAIL'\n}\n\nexport interface registerStartAction {\n  type: RegisterActionTypes.REGISTER_START;\n}\n\ninterface registerSuccessAction {\n  type: RegisterActionTypes.REGISTER_SUCCESS;\n  payload: firebase.User | null;\n}\n\ninterface registerFailAction {\n  type: RegisterActionTypes.REGISTER_FAIL;\n  payload: string;\n}\n\nexport type RegisterAction =\n  | registerStartAction\n  | registerSuccessAction\n  | registerFailAction;\n","const toastRyles = {\r\n  position: 'top-right',\r\n  autoClose: 3000,\r\n  hideProgressBar: false,\r\n  closeOnClick: true,\r\n  pauseOnHover: true,\r\n  draggable: true\r\n};\r\n\r\nexport default toastRyles;\r\n","import TextField from '@material-ui/core/TextField';\r\nimport GoogleIcon from '@mui/icons-material/Google';\r\nimport React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport AuthContent from '../../../core/components/authContent/AuthContent';\r\nimport AuthForm from '../../../core/components/authForm/AuthForm';\r\nimport MainRoutes from '../../../core/constants/MainRouters';\r\nimport { useTypedSelector } from '../../../core/hooks/useTypeSelector';\r\nimport authSelector from '../../../core/redux/selectors/authSelector';\r\nimport AuthButtons from '../../../core/components/buttons/AuthButtons';\r\nimport GoogleButton from '../../../core/components/buttons/GoogleButton';\r\nimport SingInButton from '../../../core/components/buttons/SingInButton';\r\nimport SingUpButton from '../../../core/components/buttons/SingUpButton';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useFormik } from 'formik';\r\nimport { googleSignInInitiate } from '../../../core/redux/thunk/auth/googleSignInInitiate';\r\nimport { loginInitiate } from '../../../core/redux/thunk/auth/loginInitiate';\r\nimport { validate } from './validate/validate';\r\nimport toastRyles from '../../../core/constants/toastRules';\r\n\r\nconst Login: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n  const history = useHistory();\r\n  const { currentUser } = useTypedSelector(authSelector);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: ''\r\n    },\r\n    onSubmit: (values) => {\r\n      const errors = validate(values);\r\n      const errorsValues = Object.values(errors);\r\n      const hasErrors = errorsValues.length > 0;\r\n      if (!hasErrors) {\r\n        dispatch(dispatch(loginInitiate(values.email, values.password)));\r\n      } else {\r\n        errorsValues.forEach((errorMessage) => {\r\n          toast.warn(errorMessage, toastRyles as ToastOptions);\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      history.push(MainRoutes.main);\r\n    }\r\n  }, [currentUser, history]);\r\n\r\n  const handleGoogleSignIn = () => {\r\n    dispatch(googleSignInInitiate());\r\n  };\r\n\r\n  return (\r\n    <AuthContent>\r\n      <AuthForm onSubmit={formik.handleSubmit}>\r\n        <h1>{t('marchTrello')}</h1>\r\n\r\n        <GoogleButton type=\"button\" onClick={handleGoogleSignIn}>\r\n          <GoogleIcon />\r\n        </GoogleButton>\r\n\r\n        <p>{t('or')}</p>\r\n\r\n        <TextField\r\n          id=\"email\"\r\n          label={t('enterYourMail')}\r\n          type=\"email\"\r\n          name=\"email\"\r\n          value={formik.values.email}\r\n          onChange={formik.handleChange}\r\n        />\r\n        <TextField\r\n          id=\"password\"\r\n          label={t('enterYourPassword')}\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={formik.values.password}\r\n          onChange={formik.handleChange}\r\n        />\r\n\r\n        <AuthButtons>\r\n          <SingInButton type=\"submit\">{t('logIn')}</SingInButton>\r\n          <Link to={MainRoutes.register}>\r\n            <SingUpButton type=\"button\">{t('registration')}</SingUpButton>\r\n          </Link>\r\n        </AuthButtons>\r\n      </AuthForm>\r\n    </AuthContent>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { toast, ToastOptions } from 'react-toastify';\r\nimport { Dispatch } from 'redux';\r\nimport AuthError from '../../../constants/authErrors';\r\nimport { auth } from '../../../firebase/firebase';\r\nimport {\r\n  loginFail,\r\n  loginStart,\r\n  loginSuccess\r\n} from '../../action-creators/auth/loginAction';\r\nimport { LoginAction } from '../../types/auth/loginTypes';\r\nimport i18n from '../../../../core/i18n/i18n';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { FirebaseError } from '@firebase/util';\r\n\r\nexport const loginInitiate = (email: string, password: string) => {\r\n  return async (dispatch: Dispatch<LoginAction>): Promise<void> => {\r\n    try {\r\n      dispatch(loginStart());\r\n      const { user } = await auth.signInWithEmailAndPassword(email, password);\r\n      dispatch(loginSuccess(user));\r\n    } catch (error: FirebaseError | unknown) {\r\n      if (error instanceof FirebaseError) {\r\n        if (AuthError.userNotFound === error.code) {\r\n          toast.warn(i18n.t('theUserDoesNotExist'), toastRyles as ToastOptions);\r\n        }\r\n        dispatch(loginFail(error.code));\r\n      }\r\n    }\r\n  };\r\n};\r\n","import i18n from '../../../../core/i18n/i18n';\r\n\r\ninterface ValuesType<T = string> {\r\n  password: T;\r\n  email: T;\r\n}\r\n\r\ntype ErrorType = Partial<ValuesType<string | boolean>>;\r\n\r\nexport const validate = (values: ValuesType<string>): ErrorType => {\r\n  const errors: ErrorType = {};\r\n\r\n  if (values.email === '') {\r\n    errors.email = i18n.t('youDidNotEnterYourPassword') as string;\r\n  }\r\n  if (values.password === '') {\r\n    errors.password = i18n.t('youDidNotEnterYourEmail') as string;\r\n  }\r\n\r\n  return errors;\r\n};\r\n","import firebase from 'firebase/compat/app';\r\nimport {\r\n  RegisterAction,\r\n  RegisterActionTypes\r\n} from '../../types/auth/registerTypes';\r\n\r\nexport const registerStart = (): RegisterAction => ({\r\n  type: RegisterActionTypes.REGISTER_START\r\n});\r\n\r\nexport const registerSuccess = (\r\n  user: firebase.User | null\r\n): RegisterAction => ({\r\n  type: RegisterActionTypes.REGISTER_SUCCESS,\r\n  payload: user\r\n});\r\n\r\nexport const registerFail = (error: string): RegisterAction => ({\r\n  type: RegisterActionTypes.REGISTER_FAIL,\r\n  payload: error\r\n});\r\n","export enum UserActionTypes {\n  USER_START = 'USER_START',\n  USER_SUCCESS = 'USER_SUCCESS',\n  USER_FAIL = 'USER_FAIL'\n}\n\nexport interface UserState {\n  userId: string;\n  username: string;\n  email: string;\n  boards: {\n    [key: string]: { boardId: string };\n  };\n}\n\nexport interface UserStartAction {\n  type: UserActionTypes.USER_START;\n}\n\ninterface UserSuccessAction {\n  type: UserActionTypes.USER_SUCCESS;\n  payload: UserState;\n}\n\ninterface UserFailAction {\n  type: UserActionTypes.USER_FAIL;\n  payload: string;\n}\n\nexport type UserAction = UserStartAction | UserSuccessAction | UserFailAction;\n","import {\r\n  UserAction,\r\n  UserActionTypes,\r\n  UserState\r\n} from '../../types/users/userTypes';\r\n\r\nexport const userStart = (): UserAction => ({\r\n  type: UserActionTypes.USER_START\r\n});\r\n\r\nexport const userSuccess = (user: UserState): UserAction => ({\r\n  type: UserActionTypes.USER_SUCCESS,\r\n  payload: user\r\n});\r\n\r\nexport const userFail = (error: string): UserAction => ({\r\n  type: UserActionTypes.USER_FAIL,\r\n  payload: error\r\n});\r\n","export enum LogoutActionTypes {\n  LOGOUT_START = 'LOGOUT_START',\n  LOGOUT_SUCCESS = 'LOGOUT_SUCCESS',\n  LOGOUT_FAIL = 'LOGOUT_FAIL'\n}\n\nexport interface LogoutStartAction {\n  type: LogoutActionTypes.LOGOUT_START;\n}\n\ninterface LogoutSuccessAction {\n  type: LogoutActionTypes.LOGOUT_SUCCESS;\n}\n\ninterface LogoutFailAction {\n  type: LogoutActionTypes.LOGOUT_FAIL;\n  payload: string;\n}\n\nexport type LogoutAction =\n  | LogoutStartAction\n  | LogoutSuccessAction\n  | LogoutFailAction;\n","const regexp = {\r\n  regPasswordRules: /(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{6,}/g,\r\n  regMailRules: /^[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}$/i\r\n};\r\n\r\nexport default regexp;\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport AuthContent from '../../../core/components/authContent/AuthContent';\r\nimport AuthForm from '../../../core/components/authForm/AuthForm';\r\nimport MainRoutes from '../../../core/constants/MainRouters';\r\nimport { useTypedSelector } from '../../../core/hooks/useTypeSelector';\r\nimport authSelector from '../../../core/redux/selectors/authSelector';\r\nimport AuthButtons from '../../../core/components/buttons/AuthButtons';\r\nimport SingInButton from '../../../core/components/buttons/SingInButton';\r\nimport SingUpButton from '../../../core/components/buttons/SingUpButton';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useFormik } from 'formik';\r\nimport { registerInitiate } from '../../../core/redux/thunk/auth/registerInitiate';\r\nimport { writeUserData } from '../../../core/redux/thunk/users/writeUserData';\r\nimport { validate } from './validate/validate';\r\nimport toastRyles from '../../../core/constants/toastRules';\r\n\r\nconst Register: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n  const history = useHistory();\r\n  const { currentUser } = useTypedSelector(authSelector);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      displayName: '',\r\n      email: '',\r\n      password: '',\r\n      passwordConfirm: ''\r\n    },\r\n    onSubmit: (values) => {\r\n      const errors = validate(values);\r\n      const errorsValues = Object.values(errors);\r\n      const hasErrors = errorsValues.length > 0;\r\n      if (!hasErrors) {\r\n        dispatch(\r\n          registerInitiate(values.email, values.password, values.displayName)\r\n        );\r\n      } else {\r\n        errorsValues.forEach((errorMessage) => {\r\n          toast.warn(errorMessage, toastRyles as ToastOptions);\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      history.push(MainRoutes.main);\r\n    }\r\n  }, [currentUser, history]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      dispatch(\r\n        writeUserData(\r\n          currentUser?.uid,\r\n          formik.values.displayName,\r\n          formik.values.email\r\n        )\r\n      );\r\n    }\r\n  }, [currentUser, dispatch, formik.values.displayName, formik.values.email]);\r\n\r\n  return (\r\n    <AuthContent>\r\n      <AuthForm onSubmit={formik.handleSubmit}>\r\n        <h1>{t('registration')}</h1>\r\n        <TextField\r\n          id=\"displayName\"\r\n          label={t('enterYourName')}\r\n          type=\"text\"\r\n          name=\"displayName\"\r\n          value={formik.values.displayName}\r\n          onChange={formik.handleChange}\r\n        />\r\n        <TextField\r\n          id=\"email\"\r\n          label={t('enterYourMail')}\r\n          type=\"email\"\r\n          name=\"email\"\r\n          value={formik.values.email}\r\n          onChange={formik.handleChange}\r\n        />\r\n        <TextField\r\n          id=\"password\"\r\n          label={t('enterYourPassword')}\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={formik.values.password}\r\n          onChange={formik.handleChange}\r\n        />\r\n        <TextField\r\n          id=\"passwordConfirm\"\r\n          label={t('reEnterYourPassword')}\r\n          type=\"password\"\r\n          name=\"passwordConfirm\"\r\n          value={formik.values.passwordConfirm}\r\n          onChange={formik.handleChange}\r\n        />\r\n        <AuthButtons>\r\n          <SingInButton type=\"submit\">{t('createAccount')}</SingInButton>\r\n          <Link to={MainRoutes.login}>\r\n            <SingUpButton type=\"button\">{t('goBack')}</SingUpButton>\r\n          </Link>\r\n        </AuthButtons>\r\n      </AuthForm>\r\n    </AuthContent>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import { toast, ToastOptions } from 'react-toastify';\r\nimport { Dispatch } from 'redux';\r\nimport { auth } from '../../../firebase/firebase';\r\nimport {\r\n  registerFail,\r\n  registerStart,\r\n  registerSuccess\r\n} from '../../action-creators/auth/registerAction';\r\nimport { RegisterAction } from '../../types/auth/registerTypes';\r\nimport i18n from '../../../../core/i18n/i18n';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport AuthError from '../../../constants/authErrors';\r\nimport { FirebaseError } from '@firebase/util';\r\n\r\nexport const registerInitiate = (\r\n  email: string,\r\n  password: string,\r\n  displayName: string\r\n) => {\r\n  return async (dispatch: Dispatch<RegisterAction>): Promise<void> => {\r\n    try {\r\n      dispatch(registerStart());\r\n      const { user } = await auth.createUserWithEmailAndPassword(\r\n        email,\r\n        password\r\n      );\r\n      await user?.updateProfile({\r\n        displayName\r\n      });\r\n      dispatch(registerSuccess(user));\r\n    } catch (error: FirebaseError | unknown) {\r\n      if (error instanceof FirebaseError) {\r\n        if (AuthError.emailAlreadyInUse === error.code) {\r\n          toast.warn(i18n.t('theUserExists'), toastRyles as ToastOptions);\r\n        }\r\n        dispatch(registerFail(error.code));\r\n      }\r\n    }\r\n  };\r\n};\r\n","import regexp from '../../../../core/constants/regexp';\r\nimport i18n from '../../../../core/i18n/i18n';\r\n\r\ninterface ValuesType<T = string> {\r\n  password: T;\r\n  email: T;\r\n  displayName: T;\r\n  passwordConfirm: T;\r\n}\r\n\r\ntype ErrorType = Partial<ValuesType<string | boolean>>;\r\n\r\nexport const validate = (values: ValuesType<string>): ErrorType => {\r\n  const errors: ErrorType = {};\r\n\r\n  if (values.displayName === '') {\r\n    errors.displayName = i18n.t('displayNameEmpty') as string;\r\n  }\r\n  if (!regexp.regMailRules.test(values.email)) {\r\n    errors.email = i18n.t('invalidLogin') as string;\r\n  }\r\n  if (!regexp.regPasswordRules.test(values.password)) {\r\n    errors.password = i18n.t('passwordRules') as string;\r\n  }\r\n  if (values.password !== values.passwordConfirm) {\r\n    errors.passwordConfirm = i18n.t('passwordsDoNotMatch') as string;\r\n  }\r\n\r\n  return errors;\r\n};\r\n","import { getDatabase, ref, set } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { usersRef } from '../../../helpers/userRef';\r\nimport {\r\n  userFail,\r\n  userStart,\r\n  userSuccess\r\n} from '../../action-creators/users/userAction';\r\nimport { UserAction } from '../../types/users/userTypes';\r\n\r\nexport const writeUserData = (\r\n  userId: string,\r\n  username: string,\r\n  email: string\r\n) => {\r\n  return async (dispatch: Dispatch<UserAction>): Promise<void> => {\r\n    try {\r\n      dispatch(userStart());\r\n      const user = {\r\n        userId,\r\n        username,\r\n        email,\r\n        boards: {\r\n          key: { boardId: '' }\r\n        }\r\n      };\r\n      const db = getDatabase();\r\n      set(ref(db, usersRef(userId)), {\r\n        userId: userId,\r\n        username: username,\r\n        email: email\r\n      });\r\n      dispatch(userSuccess(user));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(userFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import { RootState } from '../reducer/rootReducer';\nimport { InitUserState } from '../reducer/userReducer';\n\nconst userSelector = (state: RootState): InitUserState => state.user;\n\nexport default userSelector;\n","import { LogoutAction, LogoutActionTypes } from '../../types/auth/logoutTypes';\r\n\r\nexport const logoutStart = (): LogoutAction => ({\r\n  type: LogoutActionTypes.LOGOUT_START\r\n});\r\n\r\nexport const logoutSuccess = (): LogoutAction => ({\r\n  type: LogoutActionTypes.LOGOUT_SUCCESS\r\n});\r\n\r\nexport const logoutFail = (error: string): LogoutAction => ({\r\n  type: LogoutActionTypes.LOGOUT_FAIL,\r\n  payload: error\r\n});\r\n","export enum CardActionTypes {\r\n  CARD_START = 'CARD_START',\r\n  CARD_SUCCESS = 'CARD_SUCCESS',\r\n  CARD_FAIL = 'CARD_FAIL'\r\n}\r\n\r\nexport interface CardState {\r\n  cardId: string;\r\n  order: number;\r\n  title: string;\r\n  textContent?: string;\r\n}\r\n\r\ninterface CardStartAction {\r\n  type: CardActionTypes.CARD_START;\r\n}\r\n\r\ninterface CardSuccessAction {\r\n  type: CardActionTypes.CARD_SUCCESS;\r\n  payload: {\r\n    [id: string]: CardState;\r\n  };\r\n}\r\n\r\ninterface CardFailAction {\r\n  type: CardActionTypes.CARD_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport type CardAction = CardStartAction | CardSuccessAction | CardFailAction;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../constants/colors';\r\n\r\nconst CancelButton = styled.button`\r\n  width: 190px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.withoutColor};\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n  color: ${Colors.formMainColor};\r\n  &:hover {\r\n    border: 2px ${Colors.formMainFocusColor} solid;\r\n    color: ${Colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default CancelButton;\r\n","import styled from 'styled-components';\r\nimport colors from '../../../constants/colors';\r\n\r\nconst ExitButton = styled.button`\r\n  width: 190px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  margin-top: 40px;\r\n  background-color: ${colors.formMainColor};\r\n  outline: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n  color: ${colors.formDefaultColor};\r\n  &:hover {\r\n    background-color: ${colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default ExitButton;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../constants/colors';\r\n\r\nconst ModalBackground = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: ${Colors.closeModalBackgroundBackground};\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 100;\r\n`;\r\n\r\nexport default ModalBackground;\r\n","import styled from 'styled-components';\r\nimport Color from '../../../constants/colors';\r\n\r\nconst ModalContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  line-height: 1.8;\r\n  height: 100%;\r\n  color: ${Color.closeModalContentColor};\r\n`;\r\n\r\nexport default ModalContent;\r\n","import CloseIcon from '@material-ui/icons/Close';\r\nimport styled from 'styled-components';\r\n\r\nconst ModalIcon = styled(CloseIcon)`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 20px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  z-index: 10;\r\n`;\r\n\r\nexport default ModalIcon;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../constants/colors';\r\nimport MediaQueries from '../../../constants/mediaQueries';\r\n\r\nconst ModalWrapper = styled.div`\r\n  width: 500px;\r\n  height: 400px;\r\n  box-shadow: 0 5px 16px ${Colors.formShadow};\r\n  background: ${Colors.closeModalWrapperBackground};\r\n  color: ${Colors.closeModalWrapperColor};\r\n  display: grid;\r\n  position: relative;\r\n  z-index: 100;\r\n  border-radius: 10px;\r\n  padding: 24px;\r\n  @media ${MediaQueries.mediaTablet} {\r\n    width: 400px;\r\n    height: 350px;\r\n  }\r\n  @media ${MediaQueries.mediaMobile} {\r\n    width: 310px;\r\n    height: 350px;\r\n  }\r\n`;\r\n\r\nexport default ModalWrapper;\r\n","import React, {\r\n  Dispatch,\r\n  SetStateAction,\r\n  useCallback,\r\n  useEffect,\r\n  useRef\r\n} from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport MainRouters from '../../../constants/MainRouters';\r\nimport { useTypedSelector } from '../../../hooks/useTypeSelector';\r\nimport authSelector from '../../../redux/selectors/authSelector';\r\nimport { logoutInitiate } from '../../../redux/thunk/auth/logoutInitiate';\r\nimport CancelButton from '../../modals/modalStyled/CancelButton';\r\nimport ExitButton from '../../modals/modalStyled/ExitButton';\r\nimport ModalBackground from '../../modals/modalStyled/ModalBackground';\r\nimport ModalContent from '../../modals/modalStyled/ModalContent';\r\nimport ModalIcon from '../../modals/modalStyled/ModalIcon';\r\nimport ModalWrapper from '../../modals/modalStyled/ModalWrapper';\r\n\r\ninterface Props {\r\n  modalIsOpen: boolean;\r\n  setIsOpen: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nconst CloseModal: React.FC<Props> = (props: Props) => {\r\n  const { t } = useTranslation();\r\n  const { currentUser } = useTypedSelector(authSelector);\r\n  const { modalIsOpen, setIsOpen } = props;\r\n\r\n  const modalRef = useRef();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const closeModal = (event: React.MouseEvent<HTMLElement>) => {\r\n    if (modalRef.current === event.target) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Escape' && modalIsOpen) {\r\n        setIsOpen(false);\r\n      }\r\n    },\r\n    [modalIsOpen, setIsOpen]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', keyPress);\r\n    return () => document.removeEventListener('keydown', keyPress);\r\n  }, [keyPress]);\r\n\r\n  const showModal = () => setIsOpen((prev) => !prev);\r\n\r\n  const handleAuth = () => {\r\n    if (currentUser) {\r\n      dispatch(logoutInitiate());\r\n    }\r\n  };\r\n\r\n  const closeApp = () => {\r\n    showModal();\r\n    handleAuth();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {modalIsOpen ? (\r\n        <ModalBackground onClick={closeModal} ref={modalRef}>\r\n          <ModalWrapper>\r\n            <ModalContent>\r\n              <h1>{t('areYouSureYouWantToLogOut')}</h1>\r\n              <Link to={MainRouters.login}>\r\n                <ExitButton type=\"button\" onClick={closeApp}>\r\n                  {t('exit')}\r\n                </ExitButton>\r\n              </Link>\r\n              <CancelButton type=\"button\" onClick={showModal}>\r\n                {t('cancel')}\r\n              </CancelButton>\r\n            </ModalContent>\r\n            <ModalIcon onClick={showModal} />\r\n          </ModalWrapper>\r\n        </ModalBackground>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CloseModal;\r\n","import { Dispatch } from 'redux';\r\nimport { auth } from '../../../firebase/firebase';\r\nimport {\r\n  logoutFail,\r\n  logoutStart,\r\n  logoutSuccess\r\n} from '../../action-creators/auth/logoutAction';\r\nimport { LogoutAction } from '../../types/auth/logoutTypes';\r\n\r\nexport const logoutInitiate = () => {\r\n  return async (dispatch: Dispatch<LogoutAction>): Promise<void> => {\r\n    try {\r\n      dispatch(logoutStart());\r\n      await auth.signOut();\r\n      dispatch(logoutSuccess());\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(logoutFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../constants/colors';\r\n\r\nconst HeaderButtonStyled = styled.button`\r\n  background: ${Colors.withoutColor};\r\n  color: ${Colors.headerButtonStyledColor};\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: none;\r\n  transform: scale(1.4);\r\n`;\r\n\r\nexport default HeaderButtonStyled;\r\n","import styled from 'styled-components';\r\nimport mediaQueries from '../../../constants/mediaQueries';\r\n\r\nconst HeaderContentWidth = styled.div`\r\n  padding: 15px 60px;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  @media ${mediaQueries.mediaTabletSmall} {\r\n    width: none;\r\n    padding: 15px 30px;\r\n  }\r\n`;\r\n\r\nexport default HeaderContentWidth;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../constants/colors';\r\nimport mediaQueries from '../../../constants/mediaQueries';\r\nimport HeaderContentContainer from './HeaderContentContainer';\r\n\r\nconst HeaderStyled = styled.div`\r\n  width: 100%;\r\n  height: 60px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background: ${Colors.headerStyledBackground};\r\n  color: ${Colors.headerStyledColor};\r\n  flex-wrap: wrap;\r\n\r\n  ${HeaderContentContainer} {\r\n    width: 250px;\r\n  }\r\n\r\n  @media ${mediaQueries.mediaTabletSmall} {\r\n    ${HeaderContentContainer} {\r\n      width: auto;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default HeaderStyled;\r\n","import styled from 'styled-components';\r\nimport mediaQueries from '../../../constants/mediaQueries';\r\n\r\nconst HeaderWelcome = styled.h2`\r\n  padding: 15px 60px;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  @media ${mediaQueries.mediaLaptop} {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport default HeaderWelcome;\r\n","import ExitToAppIcon from '@mui/icons-material/ExitToApp';\r\nimport React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\r\nimport userSelector from '../../redux/selectors/userSelector';\r\nimport CloseModal from '../modals/closeModal/CloseModal';\r\nimport HeaderButtonContainer from './styled/HeaderButtonContainer';\r\nimport HeaderContentContainer from './styled/HeaderContentContainer';\r\nimport HeaderContainer from './styled/HeaderContainer';\r\nimport HeaderWelcome from './styled/HeaderWelcome';\r\n\r\nconst Header: React.FC = () => {\r\n  const { user } = useTypedSelector(userSelector);\r\n  const { t } = useTranslation();\r\n  const [modalIsOpen, setIsOpen] = useState(false);\r\n\r\n  const openCloseModal = () => {\r\n    setIsOpen((prevIsOpen) => !prevIsOpen);\r\n  };\r\n\r\n  return (\r\n    <HeaderContainer>\r\n      <HeaderContentContainer>\r\n        <h2>{t('marchTrello')}</h2>\r\n      </HeaderContentContainer>\r\n\r\n      <HeaderWelcome>\r\n        {t('hello')} {user?.username}\r\n      </HeaderWelcome>\r\n\r\n      <HeaderContentContainer>\r\n        <HeaderButtonContainer onClick={openCloseModal}>\r\n          <ExitToAppIcon />\r\n        </HeaderButtonContainer>\r\n      </HeaderContentContainer>\r\n\r\n      <CloseModal modalIsOpen={modalIsOpen} setIsOpen={setIsOpen} />\r\n    </HeaderContainer>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { InitBoardState } from '../reducer/boardReducer';\nimport { RootState } from '../reducer/rootReducer';\n\nconst boardSelector = (state: RootState): InitBoardState => state.board;\n\nexport default boardSelector;\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\n\r\nconst AddButton = styled.button`\r\n  width: 200px;\r\n  min-width: 200px;\r\n  height: 100%;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.withoutColor};\r\n  cursor: pointer;\r\n  outline: none;\r\n  color: ${Colors.addBoardButtonColor};\r\n  font-size: 16px;\r\n  margin: 10px;\r\n  padding: 10px;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n  &:before {\r\n    content: '+';\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nexport default AddButton;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\nimport MediaQueries from '../../constants/mediaQueries';\r\n\r\nconst AddContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  width: 265px;\r\n  min-width: 265px;\r\n  height: 110px;\r\n  margin-top: 10px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n\r\n  @media ${MediaQueries.mediaMobile} {\r\n    width: 235px;\r\n    min-width: 230px;\r\n  }\r\n`;\r\n\r\nexport default AddContainer;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../constants/colors';\r\n\r\nconst AddContainerButton = styled.button`\r\n  width: 140px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.formMainColor};\r\n  outline: none;\r\n  border: 0;\r\n  cursor: pointer;\r\n  color: ${Colors.formDefaultColor};\r\n  &:hover {\r\n    background-color: ${Colors.formMainFocusColor};\r\n  }\r\n`;\r\n\r\nexport default AddContainerButton;\r\n","import CloseIcon from '@material-ui/icons/Close';\r\nimport styled from 'styled-components';\r\n\r\nconst CloseIconElement = styled(CloseIcon)`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 63px;\r\n  right: 30px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  z-index: 10;\r\n`;\r\n\r\nexport default CloseIconElement;\r\n","import Input from '@mui/material/Input';\r\nimport React, { ChangeEvent, useCallback, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport AddButton from '../../../core/components/buttons/AddButton';\r\nimport AddContainer from '../../../core/components/addContainer/AddContainer';\r\nimport AddContainerButton from '../../../core/components/buttons/AddContainerButton';\r\nimport CloseIcon from '../../../core/components/closeIcon/CloseIcon';\r\n\r\ninterface Props {\r\n  title: string;\r\n  name: string;\r\n  handleChange: (event: ChangeEvent<Element>) => void;\r\n  addBoard: () => void;\r\n}\r\n\r\nconst AddBoard: React.FC<Props> = (props) => {\r\n  const [isOpenAddWrap, setIsOpenAddWrap] = useState(false);\r\n  const { title, name, handleChange, addBoard } = props;\r\n\r\n  const { t } = useTranslation();\r\n\r\n  const openAddWrap = useCallback(() => {\r\n    setIsOpenAddWrap((prevIsOpenAddWrap) => !prevIsOpenAddWrap);\r\n  }, []);\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Enter') {\r\n        addBoard();\r\n        openAddWrap();\r\n      }\r\n    },\r\n    [addBoard, openAddWrap]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isOpenAddWrap) {\r\n      document.addEventListener('keydown', keyPress);\r\n      return () => document.removeEventListener('keydown', keyPress);\r\n    }\r\n  }, [keyPress, isOpenAddWrap]);\r\n\r\n  if (isOpenAddWrap) {\r\n    return (\r\n      <AddContainer>\r\n        <Input\r\n          placeholder={t('enterTitle')}\r\n          type=\"text\"\r\n          name={name}\r\n          value={title}\r\n          onChange={handleChange}\r\n        />\r\n        <AddContainerButton type=\"button\" onClick={addBoard}>\r\n          {t('addBoard')}\r\n        </AddContainerButton>\r\n        <CloseIcon onClick={openAddWrap} />\r\n      </AddContainer>\r\n    );\r\n  }\r\n  return (\r\n    <AddButton type=\"button\" onClick={openAddWrap}>\r\n      {t('addBoard')}\r\n    </AddButton>\r\n  );\r\n};\r\n\r\nexport default AddBoard;\r\n","import { BoardState } from '../redux/types/boards/boardTypes';\nimport { CardState } from '../redux/types/cards/cardTypes';\n\ntype aType = BoardState | CardState;\ntype bType = BoardState | CardState;\n\nconst sortData = (a: aType, b: bType): number => {\n  if (a.order > b.order) {\n    return 1;\n  } else {\n    return -1;\n  }\n};\nexport default sortData;\n","import { InitCardState } from '../reducer/cardReducer';\nimport { RootState } from '../reducer/rootReducer';\n\nconst cardSelector = (state: RootState): InitCardState => state.card;\n\nexport default cardSelector;\n","export const cardsIdRef = (cardId: string): string => `cards/${cardId}`;\r\nexport const boardCardIdRef = (boardId: string, cardId: string): string =>\r\n  `boards/${boardId}/cards/${cardId}`;\r\n","import {\r\n  CardAction,\r\n  CardActionTypes,\r\n  CardState\r\n} from '../../types/cards/cardTypes';\r\n\r\nexport const cardStart = (): CardAction => ({\r\n  type: CardActionTypes.CARD_START\r\n});\r\n\r\nexport const cardSuccess = (card: { [id: string]: CardState }): CardAction => ({\r\n  type: CardActionTypes.CARD_SUCCESS,\r\n  payload: card\r\n});\r\n\r\nexport const cardFail = (error: string): CardAction => ({\r\n  type: CardActionTypes.CARD_FAIL,\r\n  payload: error\r\n});\r\n","export enum BoardActionTypes {\n  BOARD_START = 'BOARD_START',\n  BOARD_SUCCESS = 'BOARD_SUCCESS',\n  BOARD_FAIL = 'BOARD_FAIL'\n}\n\nexport interface BoardState {\n  boardId: string;\n  title: string;\n  order: number;\n  cards: {\n    [key: string]: { cardId: string };\n  };\n}\n\ninterface BoardStartAction {\n  type: BoardActionTypes.BOARD_START;\n}\n\ninterface BoardSuccessAction {\n  type: BoardActionTypes.BOARD_SUCCESS;\n  payload: {\n    [id: string]: BoardState;\n  };\n}\n\ninterface BoardFailAction {\n  type: BoardActionTypes.BOARD_FAIL;\n  payload: string;\n}\n\nexport type BoardAction =\n  | BoardStartAction\n  | BoardSuccessAction\n  | BoardFailAction;\n","import { getDatabase, ref, set } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { cardsIdRef } from '../../../helpers/cardRef';\r\nimport {\r\n  cardFail,\r\n  cardStart,\r\n  cardSuccess\r\n} from '../../action-creators/cards/cardAction';\r\nimport { CardAction, CardState } from '../../types/cards/cardTypes';\r\n\r\nexport const writeCardData = (\r\n  cardId: string,\r\n  order: number,\r\n  title: string,\r\n  textContent: string,\r\n  cards: { [id: string]: CardState }\r\n) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      const card = { cardId, order, title, textContent };\r\n      dispatch(cardStart());\r\n      const db = getDatabase();\r\n      await set(ref(db, cardsIdRef(cardId)), {\r\n        cardId: cardId,\r\n        order: order,\r\n        title: title,\r\n        textContent: textContent\r\n      });\r\n      dispatch(cardSuccess({ ...cards, [cardId]: card }));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","export const boardIdRef = (boardId: string): string => `boards/${boardId}`;\r\nexport const boardCardIdRef = (boardId: string, cardId: string): string =>\r\n  `boards/${boardId}/cards/${cardId}`;\r\n","import { getDatabase, ref, set } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { boardCardIdRef } from '../../../helpers/boardRef';\r\nimport { cardFail } from '../../action-creators/cards/cardAction';\r\nimport { CardAction } from '../../types/cards/cardTypes';\r\n\r\nexport const writeBoardCardData = (boardId: string, cardId: string) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      const usersRef = ref(db, boardCardIdRef(boardId, cardId));\r\n      set(usersRef, {\r\n        cardId: cardId\r\n      });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import {\r\n  BoardAction,\r\n  BoardActionTypes,\r\n  BoardState\r\n} from '../../types/boards/boardTypes';\r\n\r\nexport const boardStart = (): BoardAction => ({\r\n  type: BoardActionTypes.BOARD_START\r\n});\r\n\r\nexport const boardSuccess = (board: {\r\n  [id: string]: BoardState;\r\n}): BoardAction => ({\r\n  type: BoardActionTypes.BOARD_SUCCESS,\r\n  payload: board\r\n});\r\n\r\nexport const boardFail = (error: string): BoardAction => ({\r\n  type: BoardActionTypes.BOARD_FAIL,\r\n  payload: error\r\n});\r\n","import firebase from 'firebase/compat/app';\n\nexport enum SetUserTypes {\n  SET_USER = 'SET_USER'\n}\n\ninterface SetUserAction {\n  type: string;\n  payload: firebase.User | null;\n}\n\nexport type SetUserActionType = SetUserAction;\n","import { getDatabase, ref, get } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { boardIdRef } from '../../../helpers/boardRef';\r\nimport {\r\n  boardFail,\r\n  boardStart,\r\n  boardSuccess\r\n} from '../../action-creators/boards/boardAction';\r\nimport { BoardAction, BoardState } from '../../types/boards/boardTypes';\r\n\r\nexport const getBoardsData = (boardsId: string[]) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      dispatch(boardStart());\r\n      const db = getDatabase();\r\n      const boardsData = await Promise.all(\r\n        boardsId.map((boardId) => get(ref(db, boardIdRef(boardId))))\r\n      );\r\n      const allBoards = boardsData.map((snapshot) => snapshot.val());\r\n      const finalBoards = allBoards.reduce((acc, board) => {\r\n        if (board?.boardId) {\r\n          acc[board.boardId] = board;\r\n        }\r\n        return acc;\r\n      }, {} as BoardState);\r\n      dispatch(boardSuccess(finalBoards));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport userSelector from '../../selectors/userSelector';\r\nimport cardSelector from '../../selectors/cardSelector';\r\nimport { writeCardData } from './writeCardData';\r\nimport { writeBoardCardData } from './writeBoardCardData';\r\nimport { getBoardsData } from '../boards/getBoardsData';\r\n\r\ninterface CardDate {\r\n  createOrderNumCard: (currentBoardId: string) => number;\r\n  setCardState: (value: React.SetStateAction<{ cardTitle: string }>) => void;\r\n  boardId: string;\r\n  cardTitle: string;\r\n}\r\n\r\nconst addCardThunk = ({\r\n  createOrderNumCard,\r\n  setCardState,\r\n  boardId,\r\n  cardTitle\r\n}: CardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { user } = userSelector(state);\r\n      const { card } = cardSelector(state);\r\n      const cardId = uuidv4();\r\n      const order = createOrderNumCard(boardId);\r\n      dispatch(writeCardData(cardId, order, cardTitle, 'none', card));\r\n      dispatch(writeBoardCardData(boardId, cardId));\r\n      setCardState({ cardTitle: '' });\r\n      dispatch(getBoardsData(Object.keys(user.boards)));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default addCardThunk;\r\n","import { getDatabase, ref, remove } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { boardCardIdRef } from '../../../helpers/boardRef';\r\nimport { boardFail } from '../../action-creators/boards/boardAction';\r\nimport { BoardAction } from '../../types/boards/boardTypes';\r\n\r\nexport const deleteCardIdData = (cardId: string, boardId: string) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      remove(ref(db, boardCardIdRef(boardId, cardId)));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import { getDatabase, ref, remove } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { cardsIdRef } from '../../../helpers/cardRef';\r\nimport { cardFail, cardSuccess } from '../../action-creators/cards/cardAction';\r\nimport { CardAction, CardState } from '../../types/cards/cardTypes';\r\n\r\nexport const deleteCardData = (\r\n  cardId: string,\r\n  cards: { [id: string]: CardState }\r\n) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      remove(ref(db, cardsIdRef(cardId)));\r\n      delete cards[`${cardId}`];\r\n      dispatch(cardSuccess(cards));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import { getDatabase, ref, update } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { cardsIdRef } from '../../../helpers/cardRef';\r\nimport { cardFail } from '../../action-creators/cards/cardAction';\r\nimport { CardAction } from '../../types/cards/cardTypes';\r\n\r\nexport const updateCardOrderData = (cardId: string, orderNum: number) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      update(ref(db, cardsIdRef(cardId)), { order: orderNum });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import { CardState } from '../../types/cards/cardTypes';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport cardSelector from '../../selectors/cardSelector';\r\nimport { deleteCardIdData } from '../boards/deleteCardIdData';\r\nimport { deleteCardData } from './deleteCardData';\r\nimport { writeCardData } from './writeCardData';\r\nimport { writeBoardCardData } from './writeBoardCardData';\r\nimport { updateCardOrderData } from './updateCardOrderData';\r\n\r\ninterface ChangeCardOrder {\r\n  getCardsForCurrentBoard: (boardId: string) => CardState[];\r\n  currentCard: CardState;\r\n  boardId: string;\r\n  cardData: CardState;\r\n  currentBoardIdCard: string;\r\n  updateCardsOrder: (boardId: string) => void;\r\n}\r\n\r\nconst changeCardOrderBetweenBoardsThunk = ({\r\n  updateCardsOrder,\r\n  currentCard,\r\n  currentBoardIdCard,\r\n  cardData,\r\n  boardId,\r\n  getCardsForCurrentBoard\r\n}: ChangeCardOrder) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { card } = cardSelector(state);\r\n      dispatch(deleteCardData(currentCard.cardId, card));\r\n      dispatch(deleteCardIdData(currentCard.cardId, currentBoardIdCard));\r\n      updateCardsOrder(currentBoardIdCard);\r\n      updateCardsOrder(boardId);\r\n      dispatch(\r\n        writeCardData(\r\n          currentCard.cardId,\r\n          cardData.order,\r\n          currentCard.title,\r\n          'none',\r\n          card\r\n        )\r\n      );\r\n      dispatch(writeBoardCardData(boardId, currentCard.cardId));\r\n      getCardsForCurrentBoard(boardId).map((cardItem) => {\r\n        if (cardItem.order >= cardData.order) {\r\n          dispatch(updateCardOrderData(cardItem.cardId, cardItem.order + 1));\r\n        }\r\n      });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default changeCardOrderBetweenBoardsThunk;\r\n","import { CardState } from '../../types/cards/cardTypes';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { updateCardOrderData } from './updateCardOrderData';\r\n\r\ninterface ChangeCardOrder {\r\n  getCardsForCurrentBoard: (boardId: string) => CardState[];\r\n  currentCard: CardState;\r\n  boardId: string;\r\n  cardData: CardState;\r\n}\r\n\r\nconst changeCardOrderInBoardThunk = ({\r\n  getCardsForCurrentBoard,\r\n  currentCard,\r\n  boardId,\r\n  cardData\r\n}: ChangeCardOrder) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>\r\n  ): Promise<void> => {\r\n    try {\r\n      getCardsForCurrentBoard(boardId).map((card) => {\r\n        const isCurrentCard = card.cardId === currentCard.cardId;\r\n\r\n        const isFirstCard =\r\n          card.order <= cardData.order &&\r\n          card.order > currentCard.order &&\r\n          currentCard.order < cardData.order;\r\n\r\n        const isLastCard =\r\n          card.order >= cardData.order &&\r\n          card.order < currentCard.order &&\r\n          currentCard.order > cardData.order;\r\n\r\n        if (isCurrentCard) {\r\n          dispatch(updateCardOrderData(card.cardId, cardData.order));\r\n        } else if (isFirstCard) {\r\n          dispatch(updateCardOrderData(card.cardId, card.order - 1));\r\n        } else if (isLastCard) {\r\n          dispatch(updateCardOrderData(card.cardId, card.order + 1));\r\n        }\r\n      });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default changeCardOrderInBoardThunk;\r\n","import { CardState } from '../../types/cards/cardTypes';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport userSelector from '../../selectors/userSelector';\r\nimport { getBoardsData } from '../boards/getBoardsData';\r\n\r\ninterface CardDate {\r\n  currentItemNameId: string;\r\n  cardNameId: string;\r\n  currentBoardIdCard: string;\r\n  boardId: string;\r\n  cardData: CardState;\r\n  changeCardOrderInBoard: (cardData: CardState) => void;\r\n  changeCardOrderBetweenBoards: (cardData: CardState) => void;\r\n}\r\n\r\nconst dropHandlerThunk = ({\r\n  currentItemNameId,\r\n  cardNameId,\r\n  currentBoardIdCard,\r\n  changeCardOrderInBoard,\r\n  cardData,\r\n  boardId,\r\n  changeCardOrderBetweenBoards\r\n}: CardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { user } = userSelector(state);\r\n      const isCard = currentItemNameId === cardNameId;\r\n      const isCurrentBoard = currentBoardIdCard === boardId;\r\n      if (isCard) {\r\n        if (isCurrentBoard) {\r\n          changeCardOrderInBoard(cardData);\r\n        } else {\r\n          changeCardOrderBetweenBoards(cardData);\r\n        }\r\n        dispatch(getBoardsData(Object.keys(user.boards)));\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default dropHandlerThunk;\r\n","import { getDatabase, ref, get } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { cardsIdRef } from '../../../helpers/cardRef';\r\nimport {\r\n  cardFail,\r\n  cardStart,\r\n  cardSuccess\r\n} from '../../action-creators/cards/cardAction';\r\nimport { CardAction, CardState } from '../../types/cards/cardTypes';\r\n\r\nexport const getCardsData = (cardsId: string[]) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      dispatch(cardStart());\r\n      const db = getDatabase();\r\n      const cardsData = await Promise.all(\r\n        cardsId.map((cardId) => get(ref(db, cardsIdRef(cardId))))\r\n      );\r\n      const allCards = cardsData.map((snapshot) => snapshot.val());\r\n      const finalCards = allCards.reduce((acc, card) => {\r\n        if (card?.cardId) {\r\n          acc[card.cardId] = card;\r\n        }\r\n        return acc;\r\n      }, {} as CardState);\r\n      dispatch(cardSuccess(finalCards));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import Input from '@mui/material/Input';\r\nimport React, { ChangeEvent, useCallback, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport AddButton from '../../../core/components/buttons/AddButton';\r\nimport AddContainer from '../../../core/components/addContainer/AddContainer';\r\nimport AddWrapButton from '../../../core/components/buttons/AddContainerButton';\r\nimport CloseIcon from '../../../core/components/closeIcon/CloseIcon';\r\n\r\ninterface Props {\r\n  title: string;\r\n  name: string;\r\n  handleChange: (event: ChangeEvent<Element>) => void;\r\n  boardId: string;\r\n  addCard: (boardId: string) => void;\r\n}\r\n\r\nconst AddCard: React.FC<Props> = (props) => {\r\n  const [isOpenCardWrap, setIsOpenCardWrap] = useState(false);\r\n  const { title, name, handleChange, boardId, addCard } = props;\r\n\r\n  const { t } = useTranslation();\r\n\r\n  const openCardWrap = useCallback(() => {\r\n    setIsOpenCardWrap((prevCardWrap) => !prevCardWrap);\r\n  }, []);\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Enter') {\r\n        addCard(boardId);\r\n        openCardWrap();\r\n      }\r\n    },\r\n    [addCard, boardId, openCardWrap]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isOpenCardWrap) {\r\n      document.addEventListener('keydown', keyPress);\r\n      return () => document.removeEventListener('keydown', keyPress);\r\n    }\r\n  }, [keyPress, isOpenCardWrap]);\r\n\r\n  const addCardClick = () => addCard(boardId);\r\n\r\n  if (isOpenCardWrap) {\r\n    return (\r\n      <AddContainer>\r\n        <Input\r\n          placeholder={t('enterTitle')}\r\n          type=\"text\"\r\n          name={name}\r\n          value={title}\r\n          onChange={handleChange}\r\n        />\r\n        <AddWrapButton type=\"button\" onClick={addCardClick}>\r\n          {t('addCard')}\r\n        </AddWrapButton>\r\n        <CloseIcon onClick={openCardWrap} />\r\n      </AddContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AddButton type=\"button\" onClick={openCardWrap}>\r\n      {t('addCard')}\r\n    </AddButton>\r\n  );\r\n};\r\n\r\nexport default AddCard;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\nimport mediaQueries from '../../../../core/constants/mediaQueries';\r\n\r\nconst CardStyled = styled.div`\r\n  width: 250px;\r\n  height: 100%;\r\n  border-radius: 10px;\r\n  background-color: ${Colors.withoutColor};\r\n  cursor: pointer;\r\n  color: ${Colors.defaultBlackColor};\r\n  font-size: 16px;\r\n  margin: 10px;\r\n  padding: 10px;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  @media ${mediaQueries.mediaMobile} {\r\n    && {\r\n      width: 230px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CardStyled;\r\n","import styled from 'styled-components';\r\n\r\nconst OptionWrap = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport default OptionWrap;\r\n","import React, {\r\n  Dispatch,\r\n  SetStateAction,\r\n  useCallback,\r\n  useEffect,\r\n  useRef\r\n} from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Link } from 'react-router-dom';\r\nimport MainRouters from '../../../constants/MainRouters';\r\nimport CancelButton from '../../modals/modalStyled/CancelButton';\r\nimport ExitButton from '../../modals/modalStyled/ExitButton';\r\nimport ModalBackground from '../../modals/modalStyled/ModalBackground';\r\nimport ModalContent from '../../modals/modalStyled/ModalContent';\r\nimport ModalIcon from '../../modals/modalStyled/ModalIcon';\r\nimport ModalWrapper from '../../modals/modalStyled/ModalWrapper';\r\n\r\ninterface Props {\r\n  modalIsOpen: boolean;\r\n  setIsOpen: Dispatch<SetStateAction<boolean>>;\r\n  deleteCard: () => void;\r\n}\r\n\r\nconst DeleteCardModal: React.FC<Props> = (props: Props) => {\r\n  const { t } = useTranslation();\r\n\r\n  const { modalIsOpen, setIsOpen, deleteCard } = props;\r\n\r\n  const modalRef = useRef();\r\n\r\n  const closeModal = (event: React.MouseEvent<HTMLElement>) => {\r\n    if (modalRef.current === event.target) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Escape' && modalIsOpen) {\r\n        setIsOpen(false);\r\n      }\r\n    },\r\n    [modalIsOpen, setIsOpen]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', keyPress);\r\n    return () => document.removeEventListener('keydown', keyPress);\r\n  }, [keyPress]);\r\n\r\n  const showModal = () => setIsOpen((prev) => !prev);\r\n\r\n  const closeApp = () => {\r\n    deleteCard();\r\n    showModal();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {modalIsOpen ? (\r\n        <ModalBackground onClick={closeModal} ref={modalRef}>\r\n          <ModalWrapper>\r\n            <ModalContent>\r\n              <h1>{t('deleteCard')}</h1>\r\n              <Link to={MainRouters.login}>\r\n                <ExitButton type=\"button\" onClick={closeApp}>\r\n                  {t('yes')}\r\n                </ExitButton>\r\n              </Link>\r\n              <CancelButton type=\"button\" onClick={showModal}>\r\n                {t('cancel')}\r\n              </CancelButton>\r\n            </ModalContent>\r\n            <ModalIcon onClick={showModal} />\r\n          </ModalWrapper>\r\n        </ModalBackground>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteCardModal;\r\n","import { CardState } from '../../types/cards/cardTypes';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport cardSelector from '../../selectors/cardSelector';\r\nimport { deleteCardIdData } from '../boards/deleteCardIdData';\r\nimport { deleteCardData } from './deleteCardData';\r\nimport { getCardsData } from './getCardsData';\r\n\r\ninterface CardDate {\r\n  updateCardsOrder: (boardsId: string) => void;\r\n  getCardsId: () => string[];\r\n  boardId: string;\r\n  card: CardState;\r\n}\r\n\r\nconst deleteCardThunk = ({\r\n  updateCardsOrder,\r\n  card,\r\n  boardId,\r\n  getCardsId\r\n}: CardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const cards = cardSelector(state).card;\r\n      dispatch(deleteCardData(card.cardId, cards));\r\n      updateCardsOrder(boardId);\r\n      dispatch(deleteCardIdData(card.cardId, boardId));\r\n      dispatch(getCardsData(getCardsId()));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default deleteCardThunk;\r\n","import { getDatabase, ref, update } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { cardsIdRef } from '../../../helpers/cardRef';\r\nimport { cardFail } from '../../action-creators/cards/cardAction';\r\nimport { CardAction } from '../../types/cards/cardTypes';\r\n\r\nexport const editCardData = (cardId: string, cardTitle: string) => {\r\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      await update(ref(db, cardsIdRef(cardId)), { title: cardTitle });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(cardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import { CardState } from '../../types/cards/cardTypes';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { editCardData } from './editCardData';\r\nimport { getCardsData } from './getCardsData';\r\n\r\ninterface CardDate {\r\n  getCardsId: () => string[];\r\n  cardTitle: string;\r\n  card: CardState;\r\n}\r\n\r\nconst editCardThunk = ({ card, cardTitle, getCardsId }: CardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>\r\n  ): Promise<void> => {\r\n    try {\r\n      dispatch(editCardData(card.cardId, cardTitle));\r\n      dispatch(getCardsData(getCardsId()));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default editCardThunk;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { CardState } from '../../../../core/redux/types/cards/cardTypes';\r\nimport CardsContainer from '../styled/CardsContainer';\r\nimport DeleteRoundedIcon from '@mui/icons-material/DeleteRounded';\r\nimport { useDispatch } from 'react-redux';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport OptionContainer from './styled/OptionContainer';\r\nimport Input from '@mui/material/Input';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport DeleteCardModal from '../../../../core/components/modals/deleteCardModal/deleteCardModal';\r\nimport deleteCardThunk from '../../../../core/redux/thunk/cards/deleteCard';\r\nimport editCardThunk from '../../../../core/redux/thunk/cards/editCard';\r\n\r\ninterface CardProps {\r\n  card: CardState;\r\n  boardId: string;\r\n  getCardsId: () => string[];\r\n  updateCardsOrder: (boardsId: string) => void;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = (props) => {\r\n  const { card, boardId, getCardsId, updateCardsOrder } = props;\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [modalIsOpen, setIsOpen] = useState(false);\r\n  const [cardState, setCardState] = useState({\r\n    cardTitle: card.title\r\n  });\r\n  const { cardTitle } = cardState;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const updateEditCard = () => {\r\n    setIsEditing((prev) => !prev);\r\n  };\r\n\r\n  const editCard = useCallback(() => {\r\n    const data = { card, cardTitle, getCardsId };\r\n    dispatch(editCardThunk(data));\r\n    updateEditCard();\r\n  }, [card, cardTitle, getCardsId, dispatch]);\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Enter') {\r\n        editCard();\r\n      }\r\n    },\r\n    [editCard]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEditing) {\r\n      document.addEventListener('keydown', keyPress);\r\n      return () => document.removeEventListener('keydown', keyPress);\r\n    }\r\n  }, [keyPress, isEditing]);\r\n\r\n  const handleChange = (event: React.ChangeEvent) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setCardState((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const deleteCard = () => {\r\n    const data = {\r\n      updateCardsOrder,\r\n      card,\r\n      boardId,\r\n      getCardsId\r\n    };\r\n    dispatch(deleteCardThunk(data));\r\n  };\r\n\r\n  const openDeleteCardModal = () => {\r\n    setIsOpen((prevIsOpen) => !prevIsOpen);\r\n  };\r\n\r\n  if (isEditing) {\r\n    return (\r\n      <CardsContainer>\r\n        <Input\r\n          placeholder={card.title}\r\n          type=\"text\"\r\n          name=\"cardTitle\"\r\n          value={cardTitle}\r\n          onChange={handleChange}\r\n        />\r\n        <OptionContainer>\r\n          <CheckIcon onClick={editCard} />\r\n          <CloseIcon onClick={updateEditCard} />\r\n        </OptionContainer>\r\n      </CardsContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardsContainer>\r\n        {card.order}\r\n        {':'}\r\n        {card.title}\r\n        <OptionContainer>\r\n          <CreateIcon onClick={updateEditCard} />\r\n          <DeleteRoundedIcon onClick={openDeleteCardModal} />\r\n        </OptionContainer>\r\n      </CardsContainer>\r\n      <DeleteCardModal\r\n        modalIsOpen={modalIsOpen}\r\n        setIsOpen={setIsOpen}\r\n        deleteCard={deleteCard}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport sortData from '../../../core/helpers/sortData';\r\nimport { useTypedSelector } from '../../../core/hooks/useTypeSelector';\r\nimport boardSelector from '../../../core/redux/selectors/boardSelector';\r\nimport cardSelector from '../../../core/redux/selectors/cardSelector';\r\nimport userSelector from '../../../core/redux/selectors/userSelector';\r\nimport addCardThunk from '../../../core/redux/thunk/cards/AddCard';\r\nimport changeCardOrderBetweenBoardsThunk from '../../../core/redux/thunk/cards/changeCardOrderBetweenBoards';\r\nimport changeCardOrderInBoardThunk from '../../../core/redux/thunk/cards/changeCardOrderInBoard';\r\nimport dropHandlerThunk from '../../../core/redux/thunk/cards/dropHandler';\r\nimport { getCardsData } from '../../../core/redux/thunk/cards/getCardsData';\r\nimport { updateCardOrderData } from '../../../core/redux/thunk/cards/updateCardOrderData';\r\nimport { CardState } from '../../../core/redux/types/cards/cardTypes';\r\nimport AddCard from '../AddCard/AddCard';\r\nimport Card from './card/Card';\r\n\r\ninterface Props {\r\n  boardId: string;\r\n  currentCard: CardState;\r\n  setCurrentCard: React.Dispatch<CardState>;\r\n  currentBoardIdCard: string;\r\n  setCurrentBoardIdCard: React.Dispatch<string>;\r\n  currentItemNameId: string;\r\n  setCurrentItemNameId: React.Dispatch<string>;\r\n  isUpdateCards: boolean;\r\n  setIsUpdateCards: React.Dispatch<boolean>;\r\n}\r\n\r\nconst cardNameId = 'card';\r\n\r\nconst Cards: React.FC<Props> = (props) => {\r\n  const { board } = useTypedSelector(boardSelector);\r\n  const { user } = useTypedSelector(userSelector);\r\n  const { card } = useTypedSelector(cardSelector);\r\n  const {\r\n    boardId,\r\n    currentCard,\r\n    setCurrentCard,\r\n    currentBoardIdCard,\r\n    setCurrentBoardIdCard,\r\n    currentItemNameId,\r\n    setCurrentItemNameId,\r\n    isUpdateCards,\r\n    setIsUpdateCards\r\n  } = props;\r\n  const [cardState, setCardState] = useState({\r\n    cardTitle: ''\r\n  });\r\n\r\n  const { cardTitle } = cardState;\r\n\r\n  const getCardsId = useCallback(() => {\r\n    if (user.boards) {\r\n      const allCardsId = Object.values(\r\n        Object.keys(user.boards).map((boardId) => board[boardId]?.cards)\r\n      ).filter((card) => card);\r\n      const finalCardsId = Object.assign({}, ...allCardsId);\r\n      return Object.keys(finalCardsId);\r\n    }\r\n  }, [board, user.boards]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (board && board[boardId].cards) {\r\n      dispatch(getCardsData(getCardsId()));\r\n    }\r\n  }, [dispatch, board, boardId, getCardsId]);\r\n\r\n  const handleChangeCard = (event: React.ChangeEvent) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setCardState((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const getCardsForCurrentBoard = useCallback(\r\n    (boardId: string) => {\r\n      return Object.values(card).filter(\r\n        (element) =>\r\n          Object.keys(board[boardId].cards).indexOf(element.cardId) > -1\r\n      );\r\n    },\r\n    [board, card]\r\n  );\r\n\r\n  const createOrderNumCard = useCallback(\r\n    (currentBoardId: string): number => {\r\n      if (board[currentBoardId].cards) {\r\n        return getCardsForCurrentBoard(boardId).length + 1;\r\n      } else {\r\n        return 1;\r\n      }\r\n    },\r\n    [board, boardId, getCardsForCurrentBoard]\r\n  );\r\n\r\n  const addCard = useCallback(() => {\r\n    const addCardThunkData = {\r\n      createOrderNumCard,\r\n      setCardState,\r\n      boardId,\r\n      cardTitle\r\n    };\r\n    dispatch(addCardThunk(addCardThunkData));\r\n  }, [boardId, cardTitle, createOrderNumCard, dispatch]);\r\n\r\n  const updateCardsOrder = useCallback(\r\n    (boardId: string) => {\r\n      getCardsForCurrentBoard(boardId)\r\n        .sort(sortData)\r\n        .forEach((card, index) => {\r\n          dispatch(updateCardOrderData(card.cardId, index + 1));\r\n        });\r\n    },\r\n    [dispatch, getCardsForCurrentBoard]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isUpdateCards) {\r\n      updateCardsOrder(currentBoardIdCard);\r\n      setIsUpdateCards(false);\r\n    }\r\n  }, [currentBoardIdCard, isUpdateCards, setIsUpdateCards, updateCardsOrder]);\r\n\r\n  const dragStartHandler = (\r\n    event: React.DragEvent<HTMLDivElement>,\r\n    cardData: CardState\r\n  ) => {\r\n    setCurrentCard(cardData);\r\n    setCurrentBoardIdCard(boardId);\r\n    const elemName = (event.target as Element).id;\r\n    setCurrentItemNameId(elemName);\r\n  };\r\n\r\n  const dragOverHandler = (event: React.DragEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const changeCardOrderInBoard = (cardData: CardState) => {\r\n    const data = { getCardsForCurrentBoard, currentCard, boardId, cardData };\r\n    dispatch(changeCardOrderInBoardThunk(data));\r\n  };\r\n\r\n  const changeCardOrderBetweenBoards = (cardData: CardState) => {\r\n    const data = {\r\n      updateCardsOrder,\r\n      currentBoardIdCard,\r\n      cardData,\r\n      boardId,\r\n      getCardsForCurrentBoard,\r\n      currentCard\r\n    };\r\n    dispatch(changeCardOrderBetweenBoardsThunk(data));\r\n  };\r\n\r\n  const dropHandler = (\r\n    event: React.DragEvent<HTMLDivElement>,\r\n    cardData: CardState\r\n  ) => {\r\n    event.preventDefault();\r\n    const data = {\r\n      currentItemNameId,\r\n      cardNameId,\r\n      currentBoardIdCard,\r\n      changeCardOrderInBoard,\r\n      cardData,\r\n      boardId,\r\n      changeCardOrderBetweenBoards\r\n    };\r\n    dispatch(dropHandlerThunk(data));\r\n  };\r\n  const dragStart = (cardData: CardState) => {\r\n    return (event: React.DragEvent<HTMLDivElement>) => {\r\n      dragStartHandler(event, cardData);\r\n    };\r\n  };\r\n\r\n  const dragDrop = (cardData: CardState) => {\r\n    return (event: React.DragEvent<HTMLDivElement>) => {\r\n      dropHandler(event, cardData);\r\n    };\r\n  };\r\n\r\n  const isDataExist = card && board[boardId].cards;\r\n  const dataToRender = (isDataExist && getCardsForCurrentBoard(boardId)) ?? [];\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {dataToRender.sort(sortData).map((cardData) => (\r\n          <div\r\n            id=\"card\"\r\n            key={cardData.cardId}\r\n            onDragStart={dragStart(cardData)}\r\n            onDragOver={dragOverHandler}\r\n            onDrop={dragDrop(cardData)}\r\n            draggable={true}\r\n          >\r\n            <Card\r\n              getCardsId={getCardsId}\r\n              boardId={boardId}\r\n              card={cardData}\r\n              updateCardsOrder={updateCardsOrder}\r\n            ></Card>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <AddCard\r\n        title={cardTitle}\r\n        name=\"cardTitle\"\r\n        handleChange={handleChangeCard}\r\n        addCard={addCard}\r\n        boardId={boardId}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import styled from 'styled-components';\nimport Colors from '../../../../core/constants/colors';\n\nconst BoardTitle = styled.div`\n  height: 100%;\n  background-color: ${Colors.withoutColor};\n  color: ${Colors.defaultBlackColor};\n  font-size: 16px;\n  padding: 10px;\n  margin: -12px;\n  margin-bottom: 10px;\n  border-bottom: 2px ${Colors.formMainColor} solid;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  cursor: grab;\n`;\n\nexport default BoardTitle;\n","import React, {\r\n  Dispatch,\r\n  SetStateAction,\r\n  useCallback,\r\n  useEffect,\r\n  useRef\r\n} from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Link } from 'react-router-dom';\r\nimport MainRouters from '../../../constants/MainRouters';\r\nimport CancelButton from '../modalStyled/CancelButton';\r\nimport ExitButton from '../modalStyled/ExitButton';\r\nimport ModalBackground from '../modalStyled/ModalBackground';\r\nimport ModalContent from '../modalStyled/ModalContent';\r\nimport ModalIcon from '../modalStyled/ModalIcon';\r\nimport ModalWrapper from '../modalStyled/ModalWrapper';\r\n\r\ninterface Props {\r\n  modalIsOpen: boolean;\r\n  setIsOpen: Dispatch<SetStateAction<boolean>>;\r\n  delBoard: () => void;\r\n}\r\n\r\nconst DeleteBoardModal: React.FC<Props> = (props: Props) => {\r\n  const { t } = useTranslation();\r\n\r\n  const { modalIsOpen, setIsOpen, delBoard } = props;\r\n\r\n  const modalRef = useRef();\r\n\r\n  const closeModal = (event: React.MouseEvent<HTMLElement>) => {\r\n    if (modalRef.current === event.target) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Escape' && modalIsOpen) {\r\n        setIsOpen(false);\r\n      }\r\n    },\r\n    [modalIsOpen, setIsOpen]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', keyPress);\r\n    return () => document.removeEventListener('keydown', keyPress);\r\n  }, [keyPress]);\r\n\r\n  const showModal = () => setIsOpen((prev) => !prev);\r\n\r\n  const closeApp = () => {\r\n    delBoard();\r\n    showModal();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {modalIsOpen ? (\r\n        <ModalBackground onClick={closeModal} ref={modalRef}>\r\n          <ModalWrapper>\r\n            <ModalContent>\r\n              <h1>{t('deleteBoard')}</h1>\r\n              <Link to={MainRouters.login}>\r\n                <ExitButton type=\"button\" onClick={closeApp}>\r\n                  {t('yes')}\r\n                </ExitButton>\r\n              </Link>\r\n              <CancelButton type=\"button\" onClick={showModal}>\r\n                {t('cancel')}\r\n              </CancelButton>\r\n            </ModalContent>\r\n            <ModalIcon onClick={showModal} />\r\n          </ModalWrapper>\r\n        </ModalBackground>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteBoardModal;\r\n","import { getDatabase, ref, remove } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { boardIdRef } from '../../../helpers/boardRef';\r\nimport {\r\n  boardFail,\r\n  boardStart,\r\n  boardSuccess\r\n} from '../../action-creators/boards/boardAction';\r\nimport { BoardAction, BoardState } from '../../types/boards/boardTypes';\r\n\r\nexport const deleteBoardData = (\r\n  boardId: string,\r\n  boards: { [id: string]: BoardState }\r\n) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      dispatch(boardStart());\r\n      const db = getDatabase();\r\n      remove(ref(db, boardIdRef(boardId)));\r\n      delete boards[`${boardId}`];\r\n      dispatch(boardSuccess(boards));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import { getDatabase, ref, remove } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { usersBoardsRef } from '../../../helpers/userRef';\r\nimport { userFail } from '../../action-creators/users/userAction';\r\nimport { UserAction } from '../../types/users/userTypes';\r\n\r\nexport const deleteBoardIdData = (userId: string, boardId: string) => {\r\n  return async (dispatch: Dispatch<UserAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      remove(ref(db, usersBoardsRef(userId, boardId)));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(userFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import firebase from 'firebase/compat/app';\r\nimport { getDatabase, ref, get } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { usersRef } from '../../../helpers/userRef';\r\nimport {\r\n  userFail,\r\n  userStart,\r\n  userSuccess\r\n} from '../../action-creators/users/userAction';\r\nimport { UserAction } from '../../types/users/userTypes';\r\n\r\nexport const getUserData = (currentUser: firebase.User | null) => {\r\n  return async (dispatch: Dispatch<UserAction>): Promise<void> => {\r\n    try {\r\n      dispatch(userStart());\r\n      const db = getDatabase();\r\n      const userCountRef = ref(db, usersRef(currentUser?.uid));\r\n      const snapshot = await get(userCountRef);\r\n      if (snapshot.exists()) {\r\n        const data = snapshot.val();\r\n        dispatch(userSuccess(data));\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(userFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport authSelector from '../../selectors/authSelector';\r\nimport boardSelector from '../../selectors/boardSelector';\r\nimport { deleteBoardData } from './deleteBoardData';\r\nimport { deleteBoardIdData } from '../users/deleteBoardIdData';\r\nimport { getUserData } from '../users/getUserData';\r\n\r\ninterface BoardDate {\r\n  updateBoardsOrder: () => void;\r\n  deleteCardsInBoard: (boardId: string) => void;\r\n  boardId: string;\r\n}\r\n\r\nconst deleteBoardThunk = ({\r\n  deleteCardsInBoard,\r\n  boardId,\r\n  updateBoardsOrder\r\n}: BoardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { board } = boardSelector(state);\r\n      const { currentUser } = authSelector(state);\r\n      deleteCardsInBoard(boardId);\r\n      dispatch(deleteBoardData(boardId, board));\r\n      dispatch(deleteBoardIdData(currentUser.uid, boardId));\r\n      updateBoardsOrder();\r\n      dispatch(getUserData(currentUser));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default deleteBoardThunk;\r\n","import { getDatabase, ref, update } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { boardIdRef } from '../../../helpers/boardRef';\r\nimport { boardFail } from '../../action-creators/boards/boardAction';\r\nimport { BoardAction } from '../../types/boards/boardTypes';\r\n\r\nexport const editBoardData = (boardId: string, boardTitle: string) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      update(ref(db, boardIdRef(boardId)), { title: boardTitle });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { BoardState } from '../../types/boards/boardTypes';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport userSelector from '../../selectors/userSelector';\r\nimport { editBoardData } from './editBoardData';\r\nimport { getBoardsData } from './getBoardsData';\r\n\r\ninterface BoardDate {\r\n  boardData: BoardState;\r\n  boardTitle: string;\r\n}\r\n\r\nconst editBoardThunk = ({ boardData, boardTitle }: BoardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { user } = userSelector(state);\r\n      dispatch(editBoardData(boardData.boardId, boardTitle));\r\n      dispatch(getBoardsData(Object.keys(user.boards)));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default editBoardThunk;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTypedSelector } from '../../../core/hooks/useTypeSelector';\r\nimport boardSelector from '../../../core/redux/selectors/boardSelector';\r\nimport BoardTitle from './styled/BoardTitle';\r\nimport DeleteRoundedIcon from '@mui/icons-material/DeleteRounded';\r\nimport { BoardState } from '../../../core/redux/types/boards/boardTypes';\r\nimport OptionWrap from '../cards/card/styled/OptionContainer';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport Input from '@mui/material/Input';\r\nimport cardSelector from '../../../core/redux/selectors/cardSelector';\r\nimport DeleteBoardModal from '../../../core/components/modals/deleteBoardModal/deleteBoardModal';\r\nimport deleteBoardThunk from '../../../core/redux/thunk/boards/deleteBoard';\r\nimport editBoardThunk from '../../../core/redux/thunk/boards/editBoard';\r\nimport { deleteCardData } from '../../../core/redux/thunk/cards/deleteCardData';\r\n\r\ninterface BoardProps {\r\n  boardData: BoardState;\r\n  updateBoardsOrder: () => void;\r\n}\r\n\r\nconst Board: React.FC<BoardProps> = (props) => {\r\n  const { boardData, updateBoardsOrder } = props;\r\n\r\n  const { board } = useTypedSelector(boardSelector);\r\n  const cards = useTypedSelector(cardSelector).card;\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [modalIsOpen, setIsOpen] = useState(false);\r\n  const [boardState, setBoardState] = useState({\r\n    boardTitle: boardData.title\r\n  });\r\n  const { boardTitle } = boardState;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const isEditBoard = () => {\r\n    setIsEditing((prevIsEditing) => !prevIsEditing);\r\n  };\r\n\r\n  const editBoard = useCallback(() => {\r\n    const data = { boardData, boardTitle };\r\n    dispatch(editBoardThunk(data));\r\n    isEditBoard();\r\n  }, [boardData, boardTitle, dispatch]);\r\n\r\n  const keyPress = useCallback(\r\n    (event) => {\r\n      if (event.key === 'Enter') {\r\n        editBoard();\r\n      }\r\n    },\r\n    [editBoard]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEditing) {\r\n      document.addEventListener('keydown', keyPress);\r\n      return () => document.removeEventListener('keydown', keyPress);\r\n    }\r\n  }, [keyPress, isEditing]);\r\n\r\n  const deleteCardsInBoard = (boardId: string) => {\r\n    const cardsInBoards = board[boardId].cards;\r\n    if (cardsInBoards) {\r\n      const cardsId = Object.keys(cardsInBoards);\r\n      cardsId.map((cardId) => {\r\n        dispatch(deleteCardData(cardId, cards));\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteBoard = (boardId: string) => {\r\n    const data = {\r\n      deleteCardsInBoard,\r\n      boardId,\r\n      updateBoardsOrder\r\n    };\r\n    dispatch(deleteBoardThunk(data));\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setBoardState((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const delBoard = () => deleteBoard(boardData.boardId);\r\n\r\n  const openDeleteBoardModal = () => {\r\n    setIsOpen((prevIsOpen) => !prevIsOpen);\r\n  };\r\n\r\n  if (isEditing) {\r\n    return (\r\n      <BoardTitle>\r\n        <Input\r\n          placeholder={boardData.title}\r\n          type=\"text\"\r\n          name=\"boardTitle\"\r\n          value={boardTitle}\r\n          onChange={handleChange}\r\n        />\r\n        <OptionWrap>\r\n          <CheckIcon onClick={editBoard} />\r\n          <CloseIcon onClick={isEditBoard} />\r\n        </OptionWrap>\r\n      </BoardTitle>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <BoardTitle>\r\n        {boardData.order}\r\n        {':'}\r\n        {boardData.title}\r\n        <OptionWrap>\r\n          <CreateIcon onClick={isEditBoard} />\r\n          <DeleteRoundedIcon onClick={openDeleteBoardModal} />\r\n        </OptionWrap>\r\n      </BoardTitle>\r\n      <DeleteBoardModal\r\n        modalIsOpen={modalIsOpen}\r\n        setIsOpen={setIsOpen}\r\n        delBoard={delBoard}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import styled from 'styled-components';\r\nimport Colors from '../../../../core/constants/colors';\r\nimport MediaQueries from '../../../../core/constants/mediaQueries';\r\n\r\nconst BoardStyled = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  width: 290px;\r\n  min-width: 290px;\r\n  height: 100%;\r\n  margin: 10px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  border: 2px ${Colors.formMainColor} solid;\r\n\r\n  @media ${MediaQueries.mediaMobile} {\r\n    && {\r\n      min-width: 260px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default BoardStyled;\r\n","import { getDatabase, ref, set } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { boardIdRef } from '../../../helpers/boardRef';\r\nimport {\r\n  boardFail,\r\n  boardStart,\r\n  boardSuccess\r\n} from '../../action-creators/boards/boardAction';\r\nimport { BoardAction, BoardState } from '../../types/boards/boardTypes';\r\n\r\nexport const writeBoardData = (\r\n  boardId: string,\r\n  order: number,\r\n  title: string,\r\n  boards: { [id: string]: BoardState }\r\n) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      const board = {\r\n        boardId,\r\n        order,\r\n        title,\r\n        cards: {\r\n          key: { cardId: '' }\r\n        }\r\n      };\r\n      dispatch(boardStart());\r\n      const db = getDatabase();\r\n      set(ref(db, boardIdRef(boardId)), {\r\n        boardId: boardId,\r\n        order: order,\r\n        title: title\r\n      });\r\n      dispatch(boardSuccess({ ...boards, [boardId]: board }));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import firebase from 'firebase/compat/app';\r\nimport { getDatabase, ref, set } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { usersBoardsRef } from '../../../helpers/userRef';\r\nimport { userFail } from '../../action-creators/users/userAction';\r\nimport { UserAction } from '../../types/users/userTypes';\r\n\r\nexport const writeUserBoardData = (\r\n  currentUser: firebase.User | null,\r\n  boardId: string\r\n) => {\r\n  return async (dispatch: Dispatch<UserAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      const usersRef = ref(db, usersBoardsRef(currentUser?.uid, boardId));\r\n      set(usersRef, {\r\n        boardId: boardId\r\n      });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(userFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport boardSelector from '../../selectors/boardSelector';\r\nimport authSelector from '../../selectors/authSelector';\r\nimport { writeBoardData } from './writeBoardData';\r\nimport { writeUserBoardData } from '../users/writeUserBoardData';\r\n\r\ninterface CardDate {\r\n  getCurrentUserData: () => void;\r\n  setBoardState: (\r\n    value: React.SetStateAction<{\r\n      boardTitle: string;\r\n    }>\r\n  ) => void;\r\n  boardTitle: string;\r\n  createOrderNum: () => number;\r\n}\r\n\r\nconst addBoardThunk = ({\r\n  getCurrentUserData,\r\n  setBoardState,\r\n  boardTitle,\r\n  createOrderNum\r\n}: CardDate) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { currentUser } = authSelector(state);\r\n      const { board } = boardSelector(state);\r\n      const boardId = uuidv4();\r\n      const order = createOrderNum();\r\n      dispatch(writeBoardData(boardId, order, boardTitle, board));\r\n      dispatch(writeUserBoardData(currentUser, boardId));\r\n      setBoardState({ boardTitle: '' });\r\n      getCurrentUserData();\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default addBoardThunk;\r\n","import { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { BoardState } from '../../types/boards/boardTypes';\r\nimport { CardState } from '../../types/cards/cardTypes';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport userSelector from '../../selectors/userSelector';\r\nimport cardSelector from '../../selectors/cardSelector';\r\nimport { deleteCardIdData } from './deleteCardIdData';\r\nimport { getBoardsData } from './getBoardsData';\r\nimport { deleteCardData } from '../cards/deleteCardData';\r\nimport { writeCardData } from '../cards/writeCardData';\r\nimport { writeBoardCardData } from '../cards/writeBoardCardData';\r\n\r\ninterface ChangeCardOrder {\r\n  setIsUpdateCards: (value: React.SetStateAction<boolean>) => void;\r\n  currentCard: CardState;\r\n  boardData: BoardState;\r\n  currentBoardIdCard: string;\r\n}\r\n\r\nconst pushTheFirstCardToAnotherBoardThunk = ({\r\n  setIsUpdateCards,\r\n  currentCard,\r\n  currentBoardIdCard,\r\n  boardData\r\n}: ChangeCardOrder) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>,\r\n    getState: () => RootState\r\n  ): Promise<void> => {\r\n    try {\r\n      const state = getState();\r\n      const { user } = userSelector(state);\r\n      const { card } = cardSelector(state);\r\n      dispatch(deleteCardData(currentCard.cardId, card));\r\n      dispatch(deleteCardIdData(currentCard.cardId, currentBoardIdCard));\r\n      setIsUpdateCards(true);\r\n      dispatch(\r\n        writeCardData(currentCard.cardId, 1, currentCard.title, 'none', card)\r\n      );\r\n      dispatch(writeBoardCardData(boardData.boardId, currentCard.cardId));\r\n      dispatch(getBoardsData(Object.keys(user.boards)));\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default pushTheFirstCardToAnotherBoardThunk;\r\n","import { getDatabase, ref, update } from 'firebase/database';\r\nimport { Dispatch } from 'redux';\r\nimport { boardIdRef } from '../../../helpers/boardRef';\r\nimport { boardFail } from '../../action-creators/boards/boardAction';\r\nimport { BoardAction } from '../../types/boards/boardTypes';\r\n\r\nexport const updateBoardOrderData = (boardId: string, orderNum: number) => {\r\n  return async (dispatch: Dispatch<BoardAction>): Promise<void> => {\r\n    try {\r\n      const db = getDatabase();\r\n      update(ref(db, boardIdRef(boardId)), { order: orderNum });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      dispatch(boardFail(errorMessage));\r\n    }\r\n  };\r\n};\r\n","import { toast, ToastOptions } from 'react-toastify';\r\nimport toastRyles from '../../../constants/toastRules';\r\nimport { BoardState } from '../../types/boards/boardTypes';\r\nimport { RootState } from '../../reducer/rootReducer';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { updateBoardOrderData } from './updateBoardOrderData';\r\n\r\ninterface ChangeCardOrder {\r\n  filterBoards: () => BoardState[];\r\n  currentBoard: BoardState;\r\n  boardData: BoardState;\r\n}\r\n\r\nconst changeBoardOrderThunk = ({\r\n  filterBoards,\r\n  currentBoard,\r\n  boardData\r\n}: ChangeCardOrder) => {\r\n  return async (\r\n    dispatch: ThunkDispatch<RootState, void, Action>\r\n  ): Promise<void> => {\r\n    try {\r\n      filterBoards().map((board) => {\r\n        const isCurrentBoard = board.boardId === currentBoard.boardId;\r\n\r\n        const isFirstBoard =\r\n          board.order <= boardData.order &&\r\n          board.order > currentBoard.order &&\r\n          currentBoard.order < boardData.order;\r\n\r\n        const isLastBoard =\r\n          board.order >= boardData.order &&\r\n          board.order < currentBoard.order &&\r\n          currentBoard.order > boardData.order;\r\n\r\n        if (isCurrentBoard) {\r\n          dispatch(updateBoardOrderData(board.boardId, boardData.order));\r\n        } else if (isFirstBoard) {\r\n          dispatch(updateBoardOrderData(board.boardId, board.order - 1));\r\n        } else if (isLastBoard) {\r\n          dispatch(updateBoardOrderData(board.boardId, board.order + 1));\r\n        }\r\n      });\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      toast.warn(errorMessage, toastRyles as ToastOptions);\r\n    }\r\n  };\r\n};\r\n\r\nexport default changeBoardOrderThunk;\r\n","import styled from 'styled-components';\r\nimport colors from '../../../core/constants/colors';\r\n\r\nconst BoardsContainer = styled.div`\r\n  display: flex;\r\n  position: relative;\r\n  justify-items: center;\r\n  height: 100%;\r\n  min-height: 88vh;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  border-radius: 10px;\r\n  overflow-x: auto;\r\n  border: 2px ${colors.formMainColor} solid;\r\n`;\r\n\r\nexport default BoardsContainer;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Header from '../../core/components/header/Header';\r\nimport { useTypedSelector } from '../../core/hooks/useTypeSelector';\r\nimport authSelector from '../../core/redux/selectors/authSelector';\r\nimport boardSelector from '../../core/redux/selectors/boardSelector';\r\nimport userSelector from '../../core/redux/selectors/userSelector';\r\nimport { BoardState } from '../../core/redux/types/boards/boardTypes';\r\nimport AddBoard from './AddBoard/AddBoard';\r\nimport Cards from './cards/Cards';\r\nimport Board from './board/Board';\r\nimport BoardContainer from './board/styled/BoardContainer';\r\nimport sortData from '../../core/helpers/sortData';\r\nimport addBoardThunk from '../../core/redux/thunk/boards/addBoard';\r\nimport pushTheFirstCardToAnotherBoardThunk from '../../core/redux/thunk/boards/pushTheFirstCardToAnotherBoard';\r\nimport changeBoardOrderThunk from '../../core/redux/thunk/boards/changeBoardOrder';\r\nimport BoardsContainer from './styled/BoardsContainer';\r\nimport { getBoardsData } from '../../core/redux/thunk/boards/getBoardsData';\r\nimport { updateBoardOrderData } from '../../core/redux/thunk/boards/updateBoardOrderData';\r\nimport { getUserData } from '../../core/redux/thunk/users/getUserData';\r\n\r\nconst boardNameId = 'board';\r\n\r\nconst Main: React.FC = () => {\r\n  const { currentUser } = useTypedSelector(authSelector);\r\n  const { user } = useTypedSelector(userSelector);\r\n  const { board } = useTypedSelector(boardSelector);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [boardState, setBoardState] = useState({\r\n    boardTitle: ''\r\n  });\r\n  const { boardTitle } = boardState;\r\n  const [currentItemNameId, setCurrentItemNameId] = useState(null);\r\n  const [currentBoard, setCurrentBoard] = useState(null);\r\n\r\n  const [currentBoardIdCard, setCurrentBoardIdCard] = useState(null);\r\n  const [currentCard, setCurrentCard] = useState(null);\r\n  const [isUpdateCards, setIsUpdateCards] = useState(false);\r\n\r\n  const getCurrentUserData = useCallback(() => {\r\n    dispatch(getUserData(currentUser));\r\n  }, [currentUser, dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserData(currentUser));\r\n  }, [currentUser, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (user && user.boards) {\r\n      dispatch(getBoardsData(Object.keys(user.boards)));\r\n    }\r\n  }, [dispatch, user]);\r\n\r\n  const handleChangeBoard = (event: React.ChangeEvent) => {\r\n    const { name, value } = event.target as HTMLInputElement;\r\n    setBoardState((prevState) => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const filterBoards = () => {\r\n    return Object.keys(user?.boards ?? {})\r\n      .map((boardId) => {\r\n        return board?.[boardId];\r\n      })\r\n      .filter((board) => board);\r\n  };\r\n\r\n  const createOrderNum = useCallback(() => {\r\n    if (user.boards) {\r\n      return Object.keys(user.boards).length + 1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  }, [user.boards]);\r\n\r\n  const addBoard = useCallback(() => {\r\n    const data = {\r\n      getCurrentUserData,\r\n      setBoardState,\r\n      boardTitle,\r\n      createOrderNum\r\n    };\r\n    dispatch(addBoardThunk(data));\r\n  }, [boardTitle, createOrderNum, dispatch, getCurrentUserData]);\r\n\r\n  const dataToRender = Object.values(filterBoards() ?? []);\r\n\r\n  const updateBoardsOrder = () => {\r\n    filterBoards()\r\n      .sort(sortData)\r\n      .forEach((board, index) => {\r\n        dispatch(updateBoardOrderData(board.boardId, index + 1));\r\n      });\r\n  };\r\n\r\n  const dragStartHandler = (\r\n    event: React.DragEvent<HTMLDivElement>,\r\n    boardData: BoardState\r\n  ) => {\r\n    const elemName = (event.target as Element).id;\r\n    setCurrentItemNameId(elemName);\r\n    setCurrentBoard(boardData);\r\n  };\r\n\r\n  const dragOverHandler = (event: React.DragEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const changeBoardOrder = (boardData: BoardState) => {\r\n    const data = { filterBoards, currentBoard, boardData };\r\n    dispatch(changeBoardOrderThunk(data));\r\n  };\r\n\r\n  const pushTheFirstCardToAnotherBoard = (boardData: BoardState) => {\r\n    const data = {\r\n      setIsUpdateCards,\r\n      currentCard,\r\n      currentBoardIdCard,\r\n      boardData\r\n    };\r\n    dispatch(pushTheFirstCardToAnotherBoardThunk(data));\r\n  };\r\n\r\n  const dropHandler = (\r\n    event: React.DragEvent<HTMLDivElement>,\r\n    boardData: BoardState\r\n  ) => {\r\n    event.preventDefault();\r\n    const isBoard = currentItemNameId === boardNameId;\r\n    if (isBoard) {\r\n      changeBoardOrder(boardData);\r\n    } else if (!boardData.cards) {\r\n      pushTheFirstCardToAnotherBoard(boardData);\r\n    }\r\n    getCurrentUserData();\r\n  };\r\n\r\n  const dragStart = (boardData: BoardState) => {\r\n    return (event: React.DragEvent<HTMLDivElement>) => {\r\n      dragStartHandler(event, boardData);\r\n    };\r\n  };\r\n\r\n  const dragDrop = (boardData: BoardState) => {\r\n    return (event: React.DragEvent<HTMLDivElement>) => {\r\n      dropHandler(event, boardData);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <BoardsContainer>\r\n        {board &&\r\n          dataToRender.sort(sortData).map((boardData) => {\r\n            return (\r\n              board && (\r\n                <BoardContainer\r\n                  key={boardData.boardId}\r\n                  id=\"board\"\r\n                  onDragStart={dragStart(boardData)}\r\n                  onDragOver={dragOverHandler}\r\n                  onDrop={dragDrop(boardData)}\r\n                  draggable={true}\r\n                >\r\n                  <Board\r\n                    boardData={boardData}\r\n                    updateBoardsOrder={updateBoardsOrder}\r\n                  />\r\n                  <Cards\r\n                    boardId={boardData.boardId}\r\n                    currentCard={currentCard}\r\n                    setCurrentCard={setCurrentCard}\r\n                    currentBoardIdCard={currentBoardIdCard}\r\n                    setCurrentBoardIdCard={setCurrentBoardIdCard}\r\n                    currentItemNameId={currentItemNameId}\r\n                    setCurrentItemNameId={setCurrentItemNameId}\r\n                    isUpdateCards={isUpdateCards}\r\n                    setIsUpdateCards={setIsUpdateCards}\r\n                  />\r\n                </BoardContainer>\r\n              )\r\n            );\r\n          })}\r\n        <AddBoard\r\n          title={boardTitle}\r\n          name=\"boardTitle\"\r\n          handleChange={handleChangeBoard}\r\n          addBoard={addBoard}\r\n        />\r\n      </BoardsContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import firebase from 'firebase/compat/app';\nimport { SetUserActionType, SetUserTypes } from '../../types/auth/setUserTypes';\n\nconst setUserInitiate = (user: firebase.User | null): SetUserActionType => ({\n  type: SetUserTypes.SET_USER,\n  payload: user\n});\n\nexport default setUserInitiate;\n","import React from 'react';\r\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\r\nimport MainRoutes from './core/constants/MainRouters';\r\nimport { useTypedSelector } from './core/hooks/useTypeSelector';\r\nimport authSelector from './core/redux/selectors/authSelector';\r\nimport { History } from 'history';\r\n\r\ninterface PrivateRouteProps extends RouteProps {\r\n  component: React.FC<{ history: History<unknown> }>;\r\n}\r\n\r\nconst PrivateRoute = (props: PrivateRouteProps): JSX.Element => {\r\n  const { component: Component, ...rest } = props;\r\n\r\n  const { currentUser } = useTypedSelector(authSelector);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        currentUser === null ? (\r\n          <Redirect to={MainRoutes.login} />\r\n        ) : (\r\n          <Component {...props} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import firebase from 'firebase/compat/app';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport AppContainer from './core/components/AppContainer/AppContainer';\r\nimport MainRoutes from './core/constants/MainRouters';\r\nimport { auth } from './core/firebase/firebase';\r\nimport Login from './pages/auth/login/Login';\r\nimport Register from './pages/auth/register/Register';\r\nimport Main from './pages/main/Main';\r\nimport setUserInitiate from './core/redux/action-creators/auth/setUserAction';\r\nimport PrivateRoute from './privateRouter';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst App: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser: firebase.User) => {\r\n      if (authUser) {\r\n        dispatch(setUserInitiate(authUser));\r\n      } else {\r\n        dispatch(setUserInitiate(null));\r\n      }\r\n    });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <AppContainer>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <PrivateRoute exact path={MainRoutes.main} component={Main} />\r\n          <Route path={MainRoutes.login} component={Login} />\r\n          <Route path={MainRoutes.register} component={Register} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n      <ToastContainer />\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import firebase from 'firebase/compat/app';\nimport {\n  GoogleSignInAction,\n  GoogleSignInTypes\n} from '../types/auth/googleSignInTypes';\nimport { LoginAction, LoginActionTypes } from '../types/auth/loginTypes';\nimport { LogoutAction, LogoutActionTypes } from '../types/auth/logoutTypes';\nimport {\n  RegisterAction,\n  RegisterActionTypes\n} from '../types/auth/registerTypes';\nimport { SetUserActionType, SetUserTypes } from '../types/auth/setUserTypes';\n\nexport interface AuthState {\n  loading: boolean;\n  currentUser: firebase.User;\n  error: firebase.User | string;\n}\n\nconst initialState: AuthState = {\n  loading: false,\n  currentUser: null,\n  error: null\n};\n\ntype ActionTypes =\n  | GoogleSignInAction\n  | LoginAction\n  | LogoutAction\n  | RegisterAction\n  | SetUserActionType;\n\nconst authReducer = (state = initialState, action: ActionTypes): AuthState => {\n  switch (action.type) {\n    case RegisterActionTypes.REGISTER_START:\n    case LoginActionTypes.LOGIN_START:\n    case LogoutActionTypes.LOGOUT_START:\n    case GoogleSignInTypes.GOOGLE_SIGN_IN_START:\n      return {\n        ...state,\n        loading: true\n      };\n    case LogoutActionTypes.LOGOUT_SUCCESS:\n      return {\n        ...state,\n        currentUser: null\n      };\n    case SetUserTypes.SET_USER:\n    case RegisterActionTypes.REGISTER_SUCCESS:\n    case LoginActionTypes.LOGIN_SUCCESS:\n    case GoogleSignInTypes.GOOGLE_SIGN_IN_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        currentUser: action.payload\n      };\n    case RegisterActionTypes.REGISTER_FAIL:\n    case LoginActionTypes.LOGIN_FAIL:\n    case LogoutActionTypes.LOGOUT_FAIL:\n    case GoogleSignInTypes.GOOGLE_SIGN_IN_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;\n","import {\n  BoardAction,\n  BoardActionTypes,\n  BoardState\n} from '../types/boards/boardTypes';\n\nexport interface InitBoardState {\n  board: {\n    [id: string]: BoardState;\n  };\n  isLoading: boolean;\n  error: string;\n}\n\nconst initialState: InitBoardState = {\n  board: null,\n  isLoading: false,\n  error: null\n};\n\nconst userReducer = (\n  state = initialState,\n  action: BoardAction\n): InitBoardState => {\n  switch (action.type) {\n    case BoardActionTypes.BOARD_START:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case BoardActionTypes.BOARD_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        board: action.payload\n      };\n    case BoardActionTypes.BOARD_FAIL:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import {\r\n  CardAction,\r\n  CardActionTypes,\r\n  CardState\r\n} from '../types/cards/cardTypes';\r\n\r\nexport interface InitCardState {\r\n  card: {\r\n    [id: string]: CardState;\r\n  };\r\n  isLoading: boolean;\r\n  error: string;\r\n}\r\n\r\nconst initialState: InitCardState = {\r\n  card: null,\r\n  isLoading: false,\r\n  error: null\r\n};\r\n\r\nconst userReducer = (\r\n  state = initialState,\r\n  action: CardAction\r\n): InitCardState => {\r\n  switch (action.type) {\r\n    case CardActionTypes.CARD_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      };\r\n    case CardActionTypes.CARD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        card: action.payload\r\n      };\r\n    case CardActionTypes.CARD_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","import {\n  UserAction,\n  UserActionTypes,\n  UserState\n} from '../types/users/userTypes';\n\nexport interface InitUserState {\n  user: UserState;\n  isLoading: boolean;\n  error: string;\n}\n\nconst initialState: InitUserState = {\n  user: {\n    userId: '',\n    username: '',\n    email: '',\n    boards: {\n      '': { boardId: '' }\n    }\n  },\n  error: null,\n  isLoading: false\n};\n\nconst userReducer = (\n  state = initialState,\n  action: UserAction\n): InitUserState => {\n  switch (action.type) {\n    case UserActionTypes.USER_START:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case UserActionTypes.USER_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        user: action.payload\n      };\n    case UserActionTypes.USER_FAIL:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from 'redux';\r\nimport authReducer from './authReducer';\r\nimport boardReducer from './boardReducer';\r\nimport cardReducer from './cardReducer';\r\nimport userReducer from './userReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  board: boardReducer,\r\n  user: userReducer,\r\n  auth: authReducer,\r\n  card: cardReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { rootReducer } from './reducer/rootReducer';\n\nconst middleware = [thunk];\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n","import { createGlobalStyle } from 'styled-components';\n\nconst Global = createGlobalStyle`\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; \n  font-family: Roboto;\n}\n\nh1 {\n  text-align: center;\n}\n\na { \n  text-decoration: none;\n}\n`;\n\nexport default Global;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './core/i18n/i18n';\nimport { store } from './core/redux/store';\nimport GlobalStyled from './globalStyled';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyled />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}